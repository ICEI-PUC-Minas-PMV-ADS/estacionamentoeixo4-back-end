
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends Prisma.PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};

export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>


/**
 * Model Cliente
 * 
 */
export type Cliente = {
  id: number
  name: string
  email: string
  cpf: string
  createdAt: Date
  updatedAt: Date
  uuid_firebase: string
}

/**
 * Model Veiculo
 * 
 */
export type Veiculo = {
  id: number
  placa: string
  modelo: string
  id_cliente: number
  createdAt: Date
  updatedAt: Date
}

/**
 * Model Estacionamento
 * 
 */
export type Estacionamento = {
  id: number
  preco: Prisma.Decimal
  vagas_preferenciais: number
  vagas_gerais: number
  razao_social: string
  cnpj: string
  createdAt: Date
  updatedAt: Date
}

/**
 * Model Administrador
 * 
 */
export type Administrador = {
  id: number
  createdAt: Date
  updatedAt: Date
  nome: string
  email: string
  uuid_firebase: string
}

/**
 * Model EstacionamentoAndAdministradores
 * 
 */
export type EstacionamentoAndAdministradores = {
  id_estacionamento: number
  id_administrador: number
}

/**
 * Model Endereco
 * 
 */
export type Endereco = {
  id: number
  cep: number
  bairro: string
  endereco: string
  numero: number
  cidade: string
  uf: string
  id_estacionamento: number
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Clientes
 * const clientes = await prisma.cliente.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Clientes
   * const clientes = await prisma.cliente.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<this, "$connect" | "$disconnect" | "$on" | "$transaction" | "$use">) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>

      /**
   * `prisma.cliente`: Exposes CRUD operations for the **Cliente** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Clientes
    * const clientes = await prisma.cliente.findMany()
    * ```
    */
  get cliente(): Prisma.ClienteDelegate<GlobalReject>;

  /**
   * `prisma.veiculo`: Exposes CRUD operations for the **Veiculo** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Veiculos
    * const veiculos = await prisma.veiculo.findMany()
    * ```
    */
  get veiculo(): Prisma.VeiculoDelegate<GlobalReject>;

  /**
   * `prisma.estacionamento`: Exposes CRUD operations for the **Estacionamento** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Estacionamentos
    * const estacionamentos = await prisma.estacionamento.findMany()
    * ```
    */
  get estacionamento(): Prisma.EstacionamentoDelegate<GlobalReject>;

  /**
   * `prisma.administrador`: Exposes CRUD operations for the **Administrador** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Administradors
    * const administradors = await prisma.administrador.findMany()
    * ```
    */
  get administrador(): Prisma.AdministradorDelegate<GlobalReject>;

  /**
   * `prisma.estacionamentoAndAdministradores`: Exposes CRUD operations for the **EstacionamentoAndAdministradores** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more EstacionamentoAndAdministradores
    * const estacionamentoAndAdministradores = await prisma.estacionamentoAndAdministradores.findMany()
    * ```
    */
  get estacionamentoAndAdministradores(): Prisma.EstacionamentoAndAdministradoresDelegate<GlobalReject>;

  /**
   * `prisma.endereco`: Exposes CRUD operations for the **Endereco** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Enderecos
    * const enderecos = await prisma.endereco.findMany()
    * ```
    */
  get endereco(): Prisma.EnderecoDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket


  /**
   * Prisma Client JS version: 4.12.0
   * Query Engine version: 659ef412370fa3b41cd7bf6e94587c1dfb7f67e7
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: runtime.Types.Utils.LegacyExact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Cliente: 'Cliente',
    Veiculo: 'Veiculo',
    Estacionamento: 'Estacionamento',
    Administrador: 'Administrador',
    EstacionamentoAndAdministradores: 'EstacionamentoAndAdministradores',
    Endereco: 'Endereco'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, '$connect' | '$disconnect' | '$on' | '$transaction' | '$use'>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type ClienteCountOutputType
   */


  export type ClienteCountOutputType = {
    Veiculo: number
  }

  export type ClienteCountOutputTypeSelect = {
    Veiculo?: boolean
  }

  export type ClienteCountOutputTypeGetPayload<S extends boolean | null | undefined | ClienteCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? ClienteCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (ClienteCountOutputTypeArgs)
    ? ClienteCountOutputType 
    : S extends { select: any } & (ClienteCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof ClienteCountOutputType ? ClienteCountOutputType[P] : never
  } 
      : ClienteCountOutputType




  // Custom InputTypes

  /**
   * ClienteCountOutputType without action
   */
  export type ClienteCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the ClienteCountOutputType
     */
    select?: ClienteCountOutputTypeSelect | null
  }



  /**
   * Count Type EstacionamentoCountOutputType
   */


  export type EstacionamentoCountOutputType = {
    administradores: number
    Endereco: number
  }

  export type EstacionamentoCountOutputTypeSelect = {
    administradores?: boolean
    Endereco?: boolean
  }

  export type EstacionamentoCountOutputTypeGetPayload<S extends boolean | null | undefined | EstacionamentoCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? EstacionamentoCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (EstacionamentoCountOutputTypeArgs)
    ? EstacionamentoCountOutputType 
    : S extends { select: any } & (EstacionamentoCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof EstacionamentoCountOutputType ? EstacionamentoCountOutputType[P] : never
  } 
      : EstacionamentoCountOutputType




  // Custom InputTypes

  /**
   * EstacionamentoCountOutputType without action
   */
  export type EstacionamentoCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the EstacionamentoCountOutputType
     */
    select?: EstacionamentoCountOutputTypeSelect | null
  }



  /**
   * Count Type AdministradorCountOutputType
   */


  export type AdministradorCountOutputType = {
    estacionamentos: number
  }

  export type AdministradorCountOutputTypeSelect = {
    estacionamentos?: boolean
  }

  export type AdministradorCountOutputTypeGetPayload<S extends boolean | null | undefined | AdministradorCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? AdministradorCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (AdministradorCountOutputTypeArgs)
    ? AdministradorCountOutputType 
    : S extends { select: any } & (AdministradorCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof AdministradorCountOutputType ? AdministradorCountOutputType[P] : never
  } 
      : AdministradorCountOutputType




  // Custom InputTypes

  /**
   * AdministradorCountOutputType without action
   */
  export type AdministradorCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the AdministradorCountOutputType
     */
    select?: AdministradorCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model Cliente
   */


  export type AggregateCliente = {
    _count: ClienteCountAggregateOutputType | null
    _avg: ClienteAvgAggregateOutputType | null
    _sum: ClienteSumAggregateOutputType | null
    _min: ClienteMinAggregateOutputType | null
    _max: ClienteMaxAggregateOutputType | null
  }

  export type ClienteAvgAggregateOutputType = {
    id: number | null
  }

  export type ClienteSumAggregateOutputType = {
    id: number | null
  }

  export type ClienteMinAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    cpf: string | null
    createdAt: Date | null
    updatedAt: Date | null
    uuid_firebase: string | null
  }

  export type ClienteMaxAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    cpf: string | null
    createdAt: Date | null
    updatedAt: Date | null
    uuid_firebase: string | null
  }

  export type ClienteCountAggregateOutputType = {
    id: number
    name: number
    email: number
    cpf: number
    createdAt: number
    updatedAt: number
    uuid_firebase: number
    _all: number
  }


  export type ClienteAvgAggregateInputType = {
    id?: true
  }

  export type ClienteSumAggregateInputType = {
    id?: true
  }

  export type ClienteMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    cpf?: true
    createdAt?: true
    updatedAt?: true
    uuid_firebase?: true
  }

  export type ClienteMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    cpf?: true
    createdAt?: true
    updatedAt?: true
    uuid_firebase?: true
  }

  export type ClienteCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    cpf?: true
    createdAt?: true
    updatedAt?: true
    uuid_firebase?: true
    _all?: true
  }

  export type ClienteAggregateArgs = {
    /**
     * Filter which Cliente to aggregate.
     */
    where?: ClienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clientes to fetch.
     */
    orderBy?: Enumerable<ClienteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ClienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clientes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Clientes
    **/
    _count?: true | ClienteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ClienteAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ClienteSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClienteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClienteMaxAggregateInputType
  }

  export type GetClienteAggregateType<T extends ClienteAggregateArgs> = {
        [P in keyof T & keyof AggregateCliente]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCliente[P]>
      : GetScalarType<T[P], AggregateCliente[P]>
  }




  export type ClienteGroupByArgs = {
    where?: ClienteWhereInput
    orderBy?: Enumerable<ClienteOrderByWithAggregationInput>
    by: ClienteScalarFieldEnum[]
    having?: ClienteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClienteCountAggregateInputType | true
    _avg?: ClienteAvgAggregateInputType
    _sum?: ClienteSumAggregateInputType
    _min?: ClienteMinAggregateInputType
    _max?: ClienteMaxAggregateInputType
  }


  export type ClienteGroupByOutputType = {
    id: number
    name: string
    email: string
    cpf: string
    createdAt: Date
    updatedAt: Date
    uuid_firebase: string
    _count: ClienteCountAggregateOutputType | null
    _avg: ClienteAvgAggregateOutputType | null
    _sum: ClienteSumAggregateOutputType | null
    _min: ClienteMinAggregateOutputType | null
    _max: ClienteMaxAggregateOutputType | null
  }

  type GetClienteGroupByPayload<T extends ClienteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ClienteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClienteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClienteGroupByOutputType[P]>
            : GetScalarType<T[P], ClienteGroupByOutputType[P]>
        }
      >
    >


  export type ClienteSelect = {
    id?: boolean
    name?: boolean
    email?: boolean
    cpf?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    uuid_firebase?: boolean
    Veiculo?: boolean | Cliente$VeiculoArgs
    _count?: boolean | ClienteCountOutputTypeArgs
  }


  export type ClienteInclude = {
    Veiculo?: boolean | Cliente$VeiculoArgs
    _count?: boolean | ClienteCountOutputTypeArgs
  }

  export type ClienteGetPayload<S extends boolean | null | undefined | ClienteArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Cliente :
    S extends undefined ? never :
    S extends { include: any } & (ClienteArgs | ClienteFindManyArgs)
    ? Cliente  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'Veiculo' ? Array < VeiculoGetPayload<S['include'][P]>>  :
        P extends '_count' ? ClienteCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (ClienteArgs | ClienteFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'Veiculo' ? Array < VeiculoGetPayload<S['select'][P]>>  :
        P extends '_count' ? ClienteCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Cliente ? Cliente[P] : never
  } 
      : Cliente


  type ClienteCountArgs = 
    Omit<ClienteFindManyArgs, 'select' | 'include'> & {
      select?: ClienteCountAggregateInputType | true
    }

  export interface ClienteDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Cliente that matches the filter.
     * @param {ClienteFindUniqueArgs} args - Arguments to find a Cliente
     * @example
     * // Get one Cliente
     * const cliente = await prisma.cliente.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ClienteFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ClienteFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Cliente'> extends True ? Prisma__ClienteClient<ClienteGetPayload<T>> : Prisma__ClienteClient<ClienteGetPayload<T> | null, null>

    /**
     * Find one Cliente that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ClienteFindUniqueOrThrowArgs} args - Arguments to find a Cliente
     * @example
     * // Get one Cliente
     * const cliente = await prisma.cliente.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ClienteFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ClienteFindUniqueOrThrowArgs>
    ): Prisma__ClienteClient<ClienteGetPayload<T>>

    /**
     * Find the first Cliente that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteFindFirstArgs} args - Arguments to find a Cliente
     * @example
     * // Get one Cliente
     * const cliente = await prisma.cliente.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ClienteFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ClienteFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Cliente'> extends True ? Prisma__ClienteClient<ClienteGetPayload<T>> : Prisma__ClienteClient<ClienteGetPayload<T> | null, null>

    /**
     * Find the first Cliente that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteFindFirstOrThrowArgs} args - Arguments to find a Cliente
     * @example
     * // Get one Cliente
     * const cliente = await prisma.cliente.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ClienteFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ClienteFindFirstOrThrowArgs>
    ): Prisma__ClienteClient<ClienteGetPayload<T>>

    /**
     * Find zero or more Clientes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Clientes
     * const clientes = await prisma.cliente.findMany()
     * 
     * // Get first 10 Clientes
     * const clientes = await prisma.cliente.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const clienteWithIdOnly = await prisma.cliente.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ClienteFindManyArgs>(
      args?: SelectSubset<T, ClienteFindManyArgs>
    ): Prisma.PrismaPromise<Array<ClienteGetPayload<T>>>

    /**
     * Create a Cliente.
     * @param {ClienteCreateArgs} args - Arguments to create a Cliente.
     * @example
     * // Create one Cliente
     * const Cliente = await prisma.cliente.create({
     *   data: {
     *     // ... data to create a Cliente
     *   }
     * })
     * 
    **/
    create<T extends ClienteCreateArgs>(
      args: SelectSubset<T, ClienteCreateArgs>
    ): Prisma__ClienteClient<ClienteGetPayload<T>>

    /**
     * Create many Clientes.
     *     @param {ClienteCreateManyArgs} args - Arguments to create many Clientes.
     *     @example
     *     // Create many Clientes
     *     const cliente = await prisma.cliente.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ClienteCreateManyArgs>(
      args?: SelectSubset<T, ClienteCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Cliente.
     * @param {ClienteDeleteArgs} args - Arguments to delete one Cliente.
     * @example
     * // Delete one Cliente
     * const Cliente = await prisma.cliente.delete({
     *   where: {
     *     // ... filter to delete one Cliente
     *   }
     * })
     * 
    **/
    delete<T extends ClienteDeleteArgs>(
      args: SelectSubset<T, ClienteDeleteArgs>
    ): Prisma__ClienteClient<ClienteGetPayload<T>>

    /**
     * Update one Cliente.
     * @param {ClienteUpdateArgs} args - Arguments to update one Cliente.
     * @example
     * // Update one Cliente
     * const cliente = await prisma.cliente.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ClienteUpdateArgs>(
      args: SelectSubset<T, ClienteUpdateArgs>
    ): Prisma__ClienteClient<ClienteGetPayload<T>>

    /**
     * Delete zero or more Clientes.
     * @param {ClienteDeleteManyArgs} args - Arguments to filter Clientes to delete.
     * @example
     * // Delete a few Clientes
     * const { count } = await prisma.cliente.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ClienteDeleteManyArgs>(
      args?: SelectSubset<T, ClienteDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Clientes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Clientes
     * const cliente = await prisma.cliente.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ClienteUpdateManyArgs>(
      args: SelectSubset<T, ClienteUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Cliente.
     * @param {ClienteUpsertArgs} args - Arguments to update or create a Cliente.
     * @example
     * // Update or create a Cliente
     * const cliente = await prisma.cliente.upsert({
     *   create: {
     *     // ... data to create a Cliente
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Cliente we want to update
     *   }
     * })
    **/
    upsert<T extends ClienteUpsertArgs>(
      args: SelectSubset<T, ClienteUpsertArgs>
    ): Prisma__ClienteClient<ClienteGetPayload<T>>

    /**
     * Count the number of Clientes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteCountArgs} args - Arguments to filter Clientes to count.
     * @example
     * // Count the number of Clientes
     * const count = await prisma.cliente.count({
     *   where: {
     *     // ... the filter for the Clientes we want to count
     *   }
     * })
    **/
    count<T extends ClienteCountArgs>(
      args?: Subset<T, ClienteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClienteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Cliente.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClienteAggregateArgs>(args: Subset<T, ClienteAggregateArgs>): Prisma.PrismaPromise<GetClienteAggregateType<T>>

    /**
     * Group by Cliente.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClienteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClienteGroupByArgs['orderBy'] }
        : { orderBy?: ClienteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClienteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClienteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Cliente.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ClienteClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    Veiculo<T extends Cliente$VeiculoArgs= {}>(args?: Subset<T, Cliente$VeiculoArgs>): Prisma.PrismaPromise<Array<VeiculoGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Cliente base type for findUnique actions
   */
  export type ClienteFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClienteInclude | null
    /**
     * Filter, which Cliente to fetch.
     */
    where: ClienteWhereUniqueInput
  }

  /**
   * Cliente findUnique
   */
  export interface ClienteFindUniqueArgs extends ClienteFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Cliente findUniqueOrThrow
   */
  export type ClienteFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClienteInclude | null
    /**
     * Filter, which Cliente to fetch.
     */
    where: ClienteWhereUniqueInput
  }


  /**
   * Cliente base type for findFirst actions
   */
  export type ClienteFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClienteInclude | null
    /**
     * Filter, which Cliente to fetch.
     */
    where?: ClienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clientes to fetch.
     */
    orderBy?: Enumerable<ClienteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Clientes.
     */
    cursor?: ClienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clientes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Clientes.
     */
    distinct?: Enumerable<ClienteScalarFieldEnum>
  }

  /**
   * Cliente findFirst
   */
  export interface ClienteFindFirstArgs extends ClienteFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Cliente findFirstOrThrow
   */
  export type ClienteFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClienteInclude | null
    /**
     * Filter, which Cliente to fetch.
     */
    where?: ClienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clientes to fetch.
     */
    orderBy?: Enumerable<ClienteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Clientes.
     */
    cursor?: ClienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clientes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Clientes.
     */
    distinct?: Enumerable<ClienteScalarFieldEnum>
  }


  /**
   * Cliente findMany
   */
  export type ClienteFindManyArgs = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClienteInclude | null
    /**
     * Filter, which Clientes to fetch.
     */
    where?: ClienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clientes to fetch.
     */
    orderBy?: Enumerable<ClienteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Clientes.
     */
    cursor?: ClienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clientes.
     */
    skip?: number
    distinct?: Enumerable<ClienteScalarFieldEnum>
  }


  /**
   * Cliente create
   */
  export type ClienteCreateArgs = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClienteInclude | null
    /**
     * The data needed to create a Cliente.
     */
    data: XOR<ClienteCreateInput, ClienteUncheckedCreateInput>
  }


  /**
   * Cliente createMany
   */
  export type ClienteCreateManyArgs = {
    /**
     * The data used to create many Clientes.
     */
    data: Enumerable<ClienteCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Cliente update
   */
  export type ClienteUpdateArgs = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClienteInclude | null
    /**
     * The data needed to update a Cliente.
     */
    data: XOR<ClienteUpdateInput, ClienteUncheckedUpdateInput>
    /**
     * Choose, which Cliente to update.
     */
    where: ClienteWhereUniqueInput
  }


  /**
   * Cliente updateMany
   */
  export type ClienteUpdateManyArgs = {
    /**
     * The data used to update Clientes.
     */
    data: XOR<ClienteUpdateManyMutationInput, ClienteUncheckedUpdateManyInput>
    /**
     * Filter which Clientes to update
     */
    where?: ClienteWhereInput
  }


  /**
   * Cliente upsert
   */
  export type ClienteUpsertArgs = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClienteInclude | null
    /**
     * The filter to search for the Cliente to update in case it exists.
     */
    where: ClienteWhereUniqueInput
    /**
     * In case the Cliente found by the `where` argument doesn't exist, create a new Cliente with this data.
     */
    create: XOR<ClienteCreateInput, ClienteUncheckedCreateInput>
    /**
     * In case the Cliente was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ClienteUpdateInput, ClienteUncheckedUpdateInput>
  }


  /**
   * Cliente delete
   */
  export type ClienteDeleteArgs = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClienteInclude | null
    /**
     * Filter which Cliente to delete.
     */
    where: ClienteWhereUniqueInput
  }


  /**
   * Cliente deleteMany
   */
  export type ClienteDeleteManyArgs = {
    /**
     * Filter which Clientes to delete
     */
    where?: ClienteWhereInput
  }


  /**
   * Cliente.Veiculo
   */
  export type Cliente$VeiculoArgs = {
    /**
     * Select specific fields to fetch from the Veiculo
     */
    select?: VeiculoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VeiculoInclude | null
    where?: VeiculoWhereInput
    orderBy?: Enumerable<VeiculoOrderByWithRelationInput>
    cursor?: VeiculoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<VeiculoScalarFieldEnum>
  }


  /**
   * Cliente without action
   */
  export type ClienteArgs = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClienteInclude | null
  }



  /**
   * Model Veiculo
   */


  export type AggregateVeiculo = {
    _count: VeiculoCountAggregateOutputType | null
    _avg: VeiculoAvgAggregateOutputType | null
    _sum: VeiculoSumAggregateOutputType | null
    _min: VeiculoMinAggregateOutputType | null
    _max: VeiculoMaxAggregateOutputType | null
  }

  export type VeiculoAvgAggregateOutputType = {
    id: number | null
    id_cliente: number | null
  }

  export type VeiculoSumAggregateOutputType = {
    id: number | null
    id_cliente: number | null
  }

  export type VeiculoMinAggregateOutputType = {
    id: number | null
    placa: string | null
    modelo: string | null
    id_cliente: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type VeiculoMaxAggregateOutputType = {
    id: number | null
    placa: string | null
    modelo: string | null
    id_cliente: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type VeiculoCountAggregateOutputType = {
    id: number
    placa: number
    modelo: number
    id_cliente: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type VeiculoAvgAggregateInputType = {
    id?: true
    id_cliente?: true
  }

  export type VeiculoSumAggregateInputType = {
    id?: true
    id_cliente?: true
  }

  export type VeiculoMinAggregateInputType = {
    id?: true
    placa?: true
    modelo?: true
    id_cliente?: true
    createdAt?: true
    updatedAt?: true
  }

  export type VeiculoMaxAggregateInputType = {
    id?: true
    placa?: true
    modelo?: true
    id_cliente?: true
    createdAt?: true
    updatedAt?: true
  }

  export type VeiculoCountAggregateInputType = {
    id?: true
    placa?: true
    modelo?: true
    id_cliente?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type VeiculoAggregateArgs = {
    /**
     * Filter which Veiculo to aggregate.
     */
    where?: VeiculoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Veiculos to fetch.
     */
    orderBy?: Enumerable<VeiculoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VeiculoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Veiculos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Veiculos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Veiculos
    **/
    _count?: true | VeiculoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: VeiculoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: VeiculoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VeiculoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VeiculoMaxAggregateInputType
  }

  export type GetVeiculoAggregateType<T extends VeiculoAggregateArgs> = {
        [P in keyof T & keyof AggregateVeiculo]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVeiculo[P]>
      : GetScalarType<T[P], AggregateVeiculo[P]>
  }




  export type VeiculoGroupByArgs = {
    where?: VeiculoWhereInput
    orderBy?: Enumerable<VeiculoOrderByWithAggregationInput>
    by: VeiculoScalarFieldEnum[]
    having?: VeiculoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VeiculoCountAggregateInputType | true
    _avg?: VeiculoAvgAggregateInputType
    _sum?: VeiculoSumAggregateInputType
    _min?: VeiculoMinAggregateInputType
    _max?: VeiculoMaxAggregateInputType
  }


  export type VeiculoGroupByOutputType = {
    id: number
    placa: string
    modelo: string
    id_cliente: number
    createdAt: Date
    updatedAt: Date
    _count: VeiculoCountAggregateOutputType | null
    _avg: VeiculoAvgAggregateOutputType | null
    _sum: VeiculoSumAggregateOutputType | null
    _min: VeiculoMinAggregateOutputType | null
    _max: VeiculoMaxAggregateOutputType | null
  }

  type GetVeiculoGroupByPayload<T extends VeiculoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<VeiculoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VeiculoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VeiculoGroupByOutputType[P]>
            : GetScalarType<T[P], VeiculoGroupByOutputType[P]>
        }
      >
    >


  export type VeiculoSelect = {
    id?: boolean
    placa?: boolean
    modelo?: boolean
    id_cliente?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    cliente?: boolean | ClienteArgs
  }


  export type VeiculoInclude = {
    cliente?: boolean | ClienteArgs
  }

  export type VeiculoGetPayload<S extends boolean | null | undefined | VeiculoArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Veiculo :
    S extends undefined ? never :
    S extends { include: any } & (VeiculoArgs | VeiculoFindManyArgs)
    ? Veiculo  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'cliente' ? ClienteGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (VeiculoArgs | VeiculoFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'cliente' ? ClienteGetPayload<S['select'][P]> :  P extends keyof Veiculo ? Veiculo[P] : never
  } 
      : Veiculo


  type VeiculoCountArgs = 
    Omit<VeiculoFindManyArgs, 'select' | 'include'> & {
      select?: VeiculoCountAggregateInputType | true
    }

  export interface VeiculoDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Veiculo that matches the filter.
     * @param {VeiculoFindUniqueArgs} args - Arguments to find a Veiculo
     * @example
     * // Get one Veiculo
     * const veiculo = await prisma.veiculo.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends VeiculoFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, VeiculoFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Veiculo'> extends True ? Prisma__VeiculoClient<VeiculoGetPayload<T>> : Prisma__VeiculoClient<VeiculoGetPayload<T> | null, null>

    /**
     * Find one Veiculo that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {VeiculoFindUniqueOrThrowArgs} args - Arguments to find a Veiculo
     * @example
     * // Get one Veiculo
     * const veiculo = await prisma.veiculo.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends VeiculoFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, VeiculoFindUniqueOrThrowArgs>
    ): Prisma__VeiculoClient<VeiculoGetPayload<T>>

    /**
     * Find the first Veiculo that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VeiculoFindFirstArgs} args - Arguments to find a Veiculo
     * @example
     * // Get one Veiculo
     * const veiculo = await prisma.veiculo.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends VeiculoFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, VeiculoFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Veiculo'> extends True ? Prisma__VeiculoClient<VeiculoGetPayload<T>> : Prisma__VeiculoClient<VeiculoGetPayload<T> | null, null>

    /**
     * Find the first Veiculo that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VeiculoFindFirstOrThrowArgs} args - Arguments to find a Veiculo
     * @example
     * // Get one Veiculo
     * const veiculo = await prisma.veiculo.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends VeiculoFindFirstOrThrowArgs>(
      args?: SelectSubset<T, VeiculoFindFirstOrThrowArgs>
    ): Prisma__VeiculoClient<VeiculoGetPayload<T>>

    /**
     * Find zero or more Veiculos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VeiculoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Veiculos
     * const veiculos = await prisma.veiculo.findMany()
     * 
     * // Get first 10 Veiculos
     * const veiculos = await prisma.veiculo.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const veiculoWithIdOnly = await prisma.veiculo.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends VeiculoFindManyArgs>(
      args?: SelectSubset<T, VeiculoFindManyArgs>
    ): Prisma.PrismaPromise<Array<VeiculoGetPayload<T>>>

    /**
     * Create a Veiculo.
     * @param {VeiculoCreateArgs} args - Arguments to create a Veiculo.
     * @example
     * // Create one Veiculo
     * const Veiculo = await prisma.veiculo.create({
     *   data: {
     *     // ... data to create a Veiculo
     *   }
     * })
     * 
    **/
    create<T extends VeiculoCreateArgs>(
      args: SelectSubset<T, VeiculoCreateArgs>
    ): Prisma__VeiculoClient<VeiculoGetPayload<T>>

    /**
     * Create many Veiculos.
     *     @param {VeiculoCreateManyArgs} args - Arguments to create many Veiculos.
     *     @example
     *     // Create many Veiculos
     *     const veiculo = await prisma.veiculo.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends VeiculoCreateManyArgs>(
      args?: SelectSubset<T, VeiculoCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Veiculo.
     * @param {VeiculoDeleteArgs} args - Arguments to delete one Veiculo.
     * @example
     * // Delete one Veiculo
     * const Veiculo = await prisma.veiculo.delete({
     *   where: {
     *     // ... filter to delete one Veiculo
     *   }
     * })
     * 
    **/
    delete<T extends VeiculoDeleteArgs>(
      args: SelectSubset<T, VeiculoDeleteArgs>
    ): Prisma__VeiculoClient<VeiculoGetPayload<T>>

    /**
     * Update one Veiculo.
     * @param {VeiculoUpdateArgs} args - Arguments to update one Veiculo.
     * @example
     * // Update one Veiculo
     * const veiculo = await prisma.veiculo.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends VeiculoUpdateArgs>(
      args: SelectSubset<T, VeiculoUpdateArgs>
    ): Prisma__VeiculoClient<VeiculoGetPayload<T>>

    /**
     * Delete zero or more Veiculos.
     * @param {VeiculoDeleteManyArgs} args - Arguments to filter Veiculos to delete.
     * @example
     * // Delete a few Veiculos
     * const { count } = await prisma.veiculo.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends VeiculoDeleteManyArgs>(
      args?: SelectSubset<T, VeiculoDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Veiculos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VeiculoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Veiculos
     * const veiculo = await prisma.veiculo.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends VeiculoUpdateManyArgs>(
      args: SelectSubset<T, VeiculoUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Veiculo.
     * @param {VeiculoUpsertArgs} args - Arguments to update or create a Veiculo.
     * @example
     * // Update or create a Veiculo
     * const veiculo = await prisma.veiculo.upsert({
     *   create: {
     *     // ... data to create a Veiculo
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Veiculo we want to update
     *   }
     * })
    **/
    upsert<T extends VeiculoUpsertArgs>(
      args: SelectSubset<T, VeiculoUpsertArgs>
    ): Prisma__VeiculoClient<VeiculoGetPayload<T>>

    /**
     * Count the number of Veiculos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VeiculoCountArgs} args - Arguments to filter Veiculos to count.
     * @example
     * // Count the number of Veiculos
     * const count = await prisma.veiculo.count({
     *   where: {
     *     // ... the filter for the Veiculos we want to count
     *   }
     * })
    **/
    count<T extends VeiculoCountArgs>(
      args?: Subset<T, VeiculoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VeiculoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Veiculo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VeiculoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VeiculoAggregateArgs>(args: Subset<T, VeiculoAggregateArgs>): Prisma.PrismaPromise<GetVeiculoAggregateType<T>>

    /**
     * Group by Veiculo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VeiculoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VeiculoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VeiculoGroupByArgs['orderBy'] }
        : { orderBy?: VeiculoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VeiculoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVeiculoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Veiculo.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__VeiculoClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    cliente<T extends ClienteArgs= {}>(args?: Subset<T, ClienteArgs>): Prisma__ClienteClient<ClienteGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Veiculo base type for findUnique actions
   */
  export type VeiculoFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Veiculo
     */
    select?: VeiculoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VeiculoInclude | null
    /**
     * Filter, which Veiculo to fetch.
     */
    where: VeiculoWhereUniqueInput
  }

  /**
   * Veiculo findUnique
   */
  export interface VeiculoFindUniqueArgs extends VeiculoFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Veiculo findUniqueOrThrow
   */
  export type VeiculoFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Veiculo
     */
    select?: VeiculoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VeiculoInclude | null
    /**
     * Filter, which Veiculo to fetch.
     */
    where: VeiculoWhereUniqueInput
  }


  /**
   * Veiculo base type for findFirst actions
   */
  export type VeiculoFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Veiculo
     */
    select?: VeiculoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VeiculoInclude | null
    /**
     * Filter, which Veiculo to fetch.
     */
    where?: VeiculoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Veiculos to fetch.
     */
    orderBy?: Enumerable<VeiculoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Veiculos.
     */
    cursor?: VeiculoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Veiculos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Veiculos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Veiculos.
     */
    distinct?: Enumerable<VeiculoScalarFieldEnum>
  }

  /**
   * Veiculo findFirst
   */
  export interface VeiculoFindFirstArgs extends VeiculoFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Veiculo findFirstOrThrow
   */
  export type VeiculoFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Veiculo
     */
    select?: VeiculoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VeiculoInclude | null
    /**
     * Filter, which Veiculo to fetch.
     */
    where?: VeiculoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Veiculos to fetch.
     */
    orderBy?: Enumerable<VeiculoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Veiculos.
     */
    cursor?: VeiculoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Veiculos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Veiculos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Veiculos.
     */
    distinct?: Enumerable<VeiculoScalarFieldEnum>
  }


  /**
   * Veiculo findMany
   */
  export type VeiculoFindManyArgs = {
    /**
     * Select specific fields to fetch from the Veiculo
     */
    select?: VeiculoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VeiculoInclude | null
    /**
     * Filter, which Veiculos to fetch.
     */
    where?: VeiculoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Veiculos to fetch.
     */
    orderBy?: Enumerable<VeiculoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Veiculos.
     */
    cursor?: VeiculoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Veiculos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Veiculos.
     */
    skip?: number
    distinct?: Enumerable<VeiculoScalarFieldEnum>
  }


  /**
   * Veiculo create
   */
  export type VeiculoCreateArgs = {
    /**
     * Select specific fields to fetch from the Veiculo
     */
    select?: VeiculoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VeiculoInclude | null
    /**
     * The data needed to create a Veiculo.
     */
    data: XOR<VeiculoCreateInput, VeiculoUncheckedCreateInput>
  }


  /**
   * Veiculo createMany
   */
  export type VeiculoCreateManyArgs = {
    /**
     * The data used to create many Veiculos.
     */
    data: Enumerable<VeiculoCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Veiculo update
   */
  export type VeiculoUpdateArgs = {
    /**
     * Select specific fields to fetch from the Veiculo
     */
    select?: VeiculoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VeiculoInclude | null
    /**
     * The data needed to update a Veiculo.
     */
    data: XOR<VeiculoUpdateInput, VeiculoUncheckedUpdateInput>
    /**
     * Choose, which Veiculo to update.
     */
    where: VeiculoWhereUniqueInput
  }


  /**
   * Veiculo updateMany
   */
  export type VeiculoUpdateManyArgs = {
    /**
     * The data used to update Veiculos.
     */
    data: XOR<VeiculoUpdateManyMutationInput, VeiculoUncheckedUpdateManyInput>
    /**
     * Filter which Veiculos to update
     */
    where?: VeiculoWhereInput
  }


  /**
   * Veiculo upsert
   */
  export type VeiculoUpsertArgs = {
    /**
     * Select specific fields to fetch from the Veiculo
     */
    select?: VeiculoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VeiculoInclude | null
    /**
     * The filter to search for the Veiculo to update in case it exists.
     */
    where: VeiculoWhereUniqueInput
    /**
     * In case the Veiculo found by the `where` argument doesn't exist, create a new Veiculo with this data.
     */
    create: XOR<VeiculoCreateInput, VeiculoUncheckedCreateInput>
    /**
     * In case the Veiculo was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VeiculoUpdateInput, VeiculoUncheckedUpdateInput>
  }


  /**
   * Veiculo delete
   */
  export type VeiculoDeleteArgs = {
    /**
     * Select specific fields to fetch from the Veiculo
     */
    select?: VeiculoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VeiculoInclude | null
    /**
     * Filter which Veiculo to delete.
     */
    where: VeiculoWhereUniqueInput
  }


  /**
   * Veiculo deleteMany
   */
  export type VeiculoDeleteManyArgs = {
    /**
     * Filter which Veiculos to delete
     */
    where?: VeiculoWhereInput
  }


  /**
   * Veiculo without action
   */
  export type VeiculoArgs = {
    /**
     * Select specific fields to fetch from the Veiculo
     */
    select?: VeiculoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VeiculoInclude | null
  }



  /**
   * Model Estacionamento
   */


  export type AggregateEstacionamento = {
    _count: EstacionamentoCountAggregateOutputType | null
    _avg: EstacionamentoAvgAggregateOutputType | null
    _sum: EstacionamentoSumAggregateOutputType | null
    _min: EstacionamentoMinAggregateOutputType | null
    _max: EstacionamentoMaxAggregateOutputType | null
  }

  export type EstacionamentoAvgAggregateOutputType = {
    id: number | null
    preco: Decimal | null
    vagas_preferenciais: number | null
    vagas_gerais: number | null
  }

  export type EstacionamentoSumAggregateOutputType = {
    id: number | null
    preco: Decimal | null
    vagas_preferenciais: number | null
    vagas_gerais: number | null
  }

  export type EstacionamentoMinAggregateOutputType = {
    id: number | null
    preco: Decimal | null
    vagas_preferenciais: number | null
    vagas_gerais: number | null
    razao_social: string | null
    cnpj: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type EstacionamentoMaxAggregateOutputType = {
    id: number | null
    preco: Decimal | null
    vagas_preferenciais: number | null
    vagas_gerais: number | null
    razao_social: string | null
    cnpj: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type EstacionamentoCountAggregateOutputType = {
    id: number
    preco: number
    vagas_preferenciais: number
    vagas_gerais: number
    razao_social: number
    cnpj: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type EstacionamentoAvgAggregateInputType = {
    id?: true
    preco?: true
    vagas_preferenciais?: true
    vagas_gerais?: true
  }

  export type EstacionamentoSumAggregateInputType = {
    id?: true
    preco?: true
    vagas_preferenciais?: true
    vagas_gerais?: true
  }

  export type EstacionamentoMinAggregateInputType = {
    id?: true
    preco?: true
    vagas_preferenciais?: true
    vagas_gerais?: true
    razao_social?: true
    cnpj?: true
    createdAt?: true
    updatedAt?: true
  }

  export type EstacionamentoMaxAggregateInputType = {
    id?: true
    preco?: true
    vagas_preferenciais?: true
    vagas_gerais?: true
    razao_social?: true
    cnpj?: true
    createdAt?: true
    updatedAt?: true
  }

  export type EstacionamentoCountAggregateInputType = {
    id?: true
    preco?: true
    vagas_preferenciais?: true
    vagas_gerais?: true
    razao_social?: true
    cnpj?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type EstacionamentoAggregateArgs = {
    /**
     * Filter which Estacionamento to aggregate.
     */
    where?: EstacionamentoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Estacionamentos to fetch.
     */
    orderBy?: Enumerable<EstacionamentoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EstacionamentoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Estacionamentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Estacionamentos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Estacionamentos
    **/
    _count?: true | EstacionamentoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EstacionamentoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EstacionamentoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EstacionamentoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EstacionamentoMaxAggregateInputType
  }

  export type GetEstacionamentoAggregateType<T extends EstacionamentoAggregateArgs> = {
        [P in keyof T & keyof AggregateEstacionamento]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEstacionamento[P]>
      : GetScalarType<T[P], AggregateEstacionamento[P]>
  }




  export type EstacionamentoGroupByArgs = {
    where?: EstacionamentoWhereInput
    orderBy?: Enumerable<EstacionamentoOrderByWithAggregationInput>
    by: EstacionamentoScalarFieldEnum[]
    having?: EstacionamentoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EstacionamentoCountAggregateInputType | true
    _avg?: EstacionamentoAvgAggregateInputType
    _sum?: EstacionamentoSumAggregateInputType
    _min?: EstacionamentoMinAggregateInputType
    _max?: EstacionamentoMaxAggregateInputType
  }


  export type EstacionamentoGroupByOutputType = {
    id: number
    preco: Decimal
    vagas_preferenciais: number
    vagas_gerais: number
    razao_social: string
    cnpj: string
    createdAt: Date
    updatedAt: Date
    _count: EstacionamentoCountAggregateOutputType | null
    _avg: EstacionamentoAvgAggregateOutputType | null
    _sum: EstacionamentoSumAggregateOutputType | null
    _min: EstacionamentoMinAggregateOutputType | null
    _max: EstacionamentoMaxAggregateOutputType | null
  }

  type GetEstacionamentoGroupByPayload<T extends EstacionamentoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<EstacionamentoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EstacionamentoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EstacionamentoGroupByOutputType[P]>
            : GetScalarType<T[P], EstacionamentoGroupByOutputType[P]>
        }
      >
    >


  export type EstacionamentoSelect = {
    id?: boolean
    preco?: boolean
    vagas_preferenciais?: boolean
    vagas_gerais?: boolean
    razao_social?: boolean
    cnpj?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    administradores?: boolean | Estacionamento$administradoresArgs
    Endereco?: boolean | Estacionamento$EnderecoArgs
    _count?: boolean | EstacionamentoCountOutputTypeArgs
  }


  export type EstacionamentoInclude = {
    administradores?: boolean | Estacionamento$administradoresArgs
    Endereco?: boolean | Estacionamento$EnderecoArgs
    _count?: boolean | EstacionamentoCountOutputTypeArgs
  }

  export type EstacionamentoGetPayload<S extends boolean | null | undefined | EstacionamentoArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Estacionamento :
    S extends undefined ? never :
    S extends { include: any } & (EstacionamentoArgs | EstacionamentoFindManyArgs)
    ? Estacionamento  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'administradores' ? Array < EstacionamentoAndAdministradoresGetPayload<S['include'][P]>>  :
        P extends 'Endereco' ? Array < EnderecoGetPayload<S['include'][P]>>  :
        P extends '_count' ? EstacionamentoCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (EstacionamentoArgs | EstacionamentoFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'administradores' ? Array < EstacionamentoAndAdministradoresGetPayload<S['select'][P]>>  :
        P extends 'Endereco' ? Array < EnderecoGetPayload<S['select'][P]>>  :
        P extends '_count' ? EstacionamentoCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Estacionamento ? Estacionamento[P] : never
  } 
      : Estacionamento


  type EstacionamentoCountArgs = 
    Omit<EstacionamentoFindManyArgs, 'select' | 'include'> & {
      select?: EstacionamentoCountAggregateInputType | true
    }

  export interface EstacionamentoDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Estacionamento that matches the filter.
     * @param {EstacionamentoFindUniqueArgs} args - Arguments to find a Estacionamento
     * @example
     * // Get one Estacionamento
     * const estacionamento = await prisma.estacionamento.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends EstacionamentoFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, EstacionamentoFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Estacionamento'> extends True ? Prisma__EstacionamentoClient<EstacionamentoGetPayload<T>> : Prisma__EstacionamentoClient<EstacionamentoGetPayload<T> | null, null>

    /**
     * Find one Estacionamento that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {EstacionamentoFindUniqueOrThrowArgs} args - Arguments to find a Estacionamento
     * @example
     * // Get one Estacionamento
     * const estacionamento = await prisma.estacionamento.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends EstacionamentoFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, EstacionamentoFindUniqueOrThrowArgs>
    ): Prisma__EstacionamentoClient<EstacionamentoGetPayload<T>>

    /**
     * Find the first Estacionamento that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EstacionamentoFindFirstArgs} args - Arguments to find a Estacionamento
     * @example
     * // Get one Estacionamento
     * const estacionamento = await prisma.estacionamento.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends EstacionamentoFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, EstacionamentoFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Estacionamento'> extends True ? Prisma__EstacionamentoClient<EstacionamentoGetPayload<T>> : Prisma__EstacionamentoClient<EstacionamentoGetPayload<T> | null, null>

    /**
     * Find the first Estacionamento that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EstacionamentoFindFirstOrThrowArgs} args - Arguments to find a Estacionamento
     * @example
     * // Get one Estacionamento
     * const estacionamento = await prisma.estacionamento.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends EstacionamentoFindFirstOrThrowArgs>(
      args?: SelectSubset<T, EstacionamentoFindFirstOrThrowArgs>
    ): Prisma__EstacionamentoClient<EstacionamentoGetPayload<T>>

    /**
     * Find zero or more Estacionamentos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EstacionamentoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Estacionamentos
     * const estacionamentos = await prisma.estacionamento.findMany()
     * 
     * // Get first 10 Estacionamentos
     * const estacionamentos = await prisma.estacionamento.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const estacionamentoWithIdOnly = await prisma.estacionamento.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends EstacionamentoFindManyArgs>(
      args?: SelectSubset<T, EstacionamentoFindManyArgs>
    ): Prisma.PrismaPromise<Array<EstacionamentoGetPayload<T>>>

    /**
     * Create a Estacionamento.
     * @param {EstacionamentoCreateArgs} args - Arguments to create a Estacionamento.
     * @example
     * // Create one Estacionamento
     * const Estacionamento = await prisma.estacionamento.create({
     *   data: {
     *     // ... data to create a Estacionamento
     *   }
     * })
     * 
    **/
    create<T extends EstacionamentoCreateArgs>(
      args: SelectSubset<T, EstacionamentoCreateArgs>
    ): Prisma__EstacionamentoClient<EstacionamentoGetPayload<T>>

    /**
     * Create many Estacionamentos.
     *     @param {EstacionamentoCreateManyArgs} args - Arguments to create many Estacionamentos.
     *     @example
     *     // Create many Estacionamentos
     *     const estacionamento = await prisma.estacionamento.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends EstacionamentoCreateManyArgs>(
      args?: SelectSubset<T, EstacionamentoCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Estacionamento.
     * @param {EstacionamentoDeleteArgs} args - Arguments to delete one Estacionamento.
     * @example
     * // Delete one Estacionamento
     * const Estacionamento = await prisma.estacionamento.delete({
     *   where: {
     *     // ... filter to delete one Estacionamento
     *   }
     * })
     * 
    **/
    delete<T extends EstacionamentoDeleteArgs>(
      args: SelectSubset<T, EstacionamentoDeleteArgs>
    ): Prisma__EstacionamentoClient<EstacionamentoGetPayload<T>>

    /**
     * Update one Estacionamento.
     * @param {EstacionamentoUpdateArgs} args - Arguments to update one Estacionamento.
     * @example
     * // Update one Estacionamento
     * const estacionamento = await prisma.estacionamento.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends EstacionamentoUpdateArgs>(
      args: SelectSubset<T, EstacionamentoUpdateArgs>
    ): Prisma__EstacionamentoClient<EstacionamentoGetPayload<T>>

    /**
     * Delete zero or more Estacionamentos.
     * @param {EstacionamentoDeleteManyArgs} args - Arguments to filter Estacionamentos to delete.
     * @example
     * // Delete a few Estacionamentos
     * const { count } = await prisma.estacionamento.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends EstacionamentoDeleteManyArgs>(
      args?: SelectSubset<T, EstacionamentoDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Estacionamentos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EstacionamentoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Estacionamentos
     * const estacionamento = await prisma.estacionamento.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends EstacionamentoUpdateManyArgs>(
      args: SelectSubset<T, EstacionamentoUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Estacionamento.
     * @param {EstacionamentoUpsertArgs} args - Arguments to update or create a Estacionamento.
     * @example
     * // Update or create a Estacionamento
     * const estacionamento = await prisma.estacionamento.upsert({
     *   create: {
     *     // ... data to create a Estacionamento
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Estacionamento we want to update
     *   }
     * })
    **/
    upsert<T extends EstacionamentoUpsertArgs>(
      args: SelectSubset<T, EstacionamentoUpsertArgs>
    ): Prisma__EstacionamentoClient<EstacionamentoGetPayload<T>>

    /**
     * Count the number of Estacionamentos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EstacionamentoCountArgs} args - Arguments to filter Estacionamentos to count.
     * @example
     * // Count the number of Estacionamentos
     * const count = await prisma.estacionamento.count({
     *   where: {
     *     // ... the filter for the Estacionamentos we want to count
     *   }
     * })
    **/
    count<T extends EstacionamentoCountArgs>(
      args?: Subset<T, EstacionamentoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EstacionamentoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Estacionamento.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EstacionamentoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EstacionamentoAggregateArgs>(args: Subset<T, EstacionamentoAggregateArgs>): Prisma.PrismaPromise<GetEstacionamentoAggregateType<T>>

    /**
     * Group by Estacionamento.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EstacionamentoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EstacionamentoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EstacionamentoGroupByArgs['orderBy'] }
        : { orderBy?: EstacionamentoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EstacionamentoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEstacionamentoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Estacionamento.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__EstacionamentoClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    administradores<T extends Estacionamento$administradoresArgs= {}>(args?: Subset<T, Estacionamento$administradoresArgs>): Prisma.PrismaPromise<Array<EstacionamentoAndAdministradoresGetPayload<T>>| Null>;

    Endereco<T extends Estacionamento$EnderecoArgs= {}>(args?: Subset<T, Estacionamento$EnderecoArgs>): Prisma.PrismaPromise<Array<EnderecoGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Estacionamento base type for findUnique actions
   */
  export type EstacionamentoFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Estacionamento
     */
    select?: EstacionamentoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EstacionamentoInclude | null
    /**
     * Filter, which Estacionamento to fetch.
     */
    where: EstacionamentoWhereUniqueInput
  }

  /**
   * Estacionamento findUnique
   */
  export interface EstacionamentoFindUniqueArgs extends EstacionamentoFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Estacionamento findUniqueOrThrow
   */
  export type EstacionamentoFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Estacionamento
     */
    select?: EstacionamentoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EstacionamentoInclude | null
    /**
     * Filter, which Estacionamento to fetch.
     */
    where: EstacionamentoWhereUniqueInput
  }


  /**
   * Estacionamento base type for findFirst actions
   */
  export type EstacionamentoFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Estacionamento
     */
    select?: EstacionamentoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EstacionamentoInclude | null
    /**
     * Filter, which Estacionamento to fetch.
     */
    where?: EstacionamentoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Estacionamentos to fetch.
     */
    orderBy?: Enumerable<EstacionamentoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Estacionamentos.
     */
    cursor?: EstacionamentoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Estacionamentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Estacionamentos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Estacionamentos.
     */
    distinct?: Enumerable<EstacionamentoScalarFieldEnum>
  }

  /**
   * Estacionamento findFirst
   */
  export interface EstacionamentoFindFirstArgs extends EstacionamentoFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Estacionamento findFirstOrThrow
   */
  export type EstacionamentoFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Estacionamento
     */
    select?: EstacionamentoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EstacionamentoInclude | null
    /**
     * Filter, which Estacionamento to fetch.
     */
    where?: EstacionamentoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Estacionamentos to fetch.
     */
    orderBy?: Enumerable<EstacionamentoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Estacionamentos.
     */
    cursor?: EstacionamentoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Estacionamentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Estacionamentos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Estacionamentos.
     */
    distinct?: Enumerable<EstacionamentoScalarFieldEnum>
  }


  /**
   * Estacionamento findMany
   */
  export type EstacionamentoFindManyArgs = {
    /**
     * Select specific fields to fetch from the Estacionamento
     */
    select?: EstacionamentoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EstacionamentoInclude | null
    /**
     * Filter, which Estacionamentos to fetch.
     */
    where?: EstacionamentoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Estacionamentos to fetch.
     */
    orderBy?: Enumerable<EstacionamentoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Estacionamentos.
     */
    cursor?: EstacionamentoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Estacionamentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Estacionamentos.
     */
    skip?: number
    distinct?: Enumerable<EstacionamentoScalarFieldEnum>
  }


  /**
   * Estacionamento create
   */
  export type EstacionamentoCreateArgs = {
    /**
     * Select specific fields to fetch from the Estacionamento
     */
    select?: EstacionamentoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EstacionamentoInclude | null
    /**
     * The data needed to create a Estacionamento.
     */
    data: XOR<EstacionamentoCreateInput, EstacionamentoUncheckedCreateInput>
  }


  /**
   * Estacionamento createMany
   */
  export type EstacionamentoCreateManyArgs = {
    /**
     * The data used to create many Estacionamentos.
     */
    data: Enumerable<EstacionamentoCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Estacionamento update
   */
  export type EstacionamentoUpdateArgs = {
    /**
     * Select specific fields to fetch from the Estacionamento
     */
    select?: EstacionamentoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EstacionamentoInclude | null
    /**
     * The data needed to update a Estacionamento.
     */
    data: XOR<EstacionamentoUpdateInput, EstacionamentoUncheckedUpdateInput>
    /**
     * Choose, which Estacionamento to update.
     */
    where: EstacionamentoWhereUniqueInput
  }


  /**
   * Estacionamento updateMany
   */
  export type EstacionamentoUpdateManyArgs = {
    /**
     * The data used to update Estacionamentos.
     */
    data: XOR<EstacionamentoUpdateManyMutationInput, EstacionamentoUncheckedUpdateManyInput>
    /**
     * Filter which Estacionamentos to update
     */
    where?: EstacionamentoWhereInput
  }


  /**
   * Estacionamento upsert
   */
  export type EstacionamentoUpsertArgs = {
    /**
     * Select specific fields to fetch from the Estacionamento
     */
    select?: EstacionamentoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EstacionamentoInclude | null
    /**
     * The filter to search for the Estacionamento to update in case it exists.
     */
    where: EstacionamentoWhereUniqueInput
    /**
     * In case the Estacionamento found by the `where` argument doesn't exist, create a new Estacionamento with this data.
     */
    create: XOR<EstacionamentoCreateInput, EstacionamentoUncheckedCreateInput>
    /**
     * In case the Estacionamento was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EstacionamentoUpdateInput, EstacionamentoUncheckedUpdateInput>
  }


  /**
   * Estacionamento delete
   */
  export type EstacionamentoDeleteArgs = {
    /**
     * Select specific fields to fetch from the Estacionamento
     */
    select?: EstacionamentoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EstacionamentoInclude | null
    /**
     * Filter which Estacionamento to delete.
     */
    where: EstacionamentoWhereUniqueInput
  }


  /**
   * Estacionamento deleteMany
   */
  export type EstacionamentoDeleteManyArgs = {
    /**
     * Filter which Estacionamentos to delete
     */
    where?: EstacionamentoWhereInput
  }


  /**
   * Estacionamento.administradores
   */
  export type Estacionamento$administradoresArgs = {
    /**
     * Select specific fields to fetch from the EstacionamentoAndAdministradores
     */
    select?: EstacionamentoAndAdministradoresSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EstacionamentoAndAdministradoresInclude | null
    where?: EstacionamentoAndAdministradoresWhereInput
    orderBy?: Enumerable<EstacionamentoAndAdministradoresOrderByWithRelationInput>
    cursor?: EstacionamentoAndAdministradoresWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<EstacionamentoAndAdministradoresScalarFieldEnum>
  }


  /**
   * Estacionamento.Endereco
   */
  export type Estacionamento$EnderecoArgs = {
    /**
     * Select specific fields to fetch from the Endereco
     */
    select?: EnderecoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EnderecoInclude | null
    where?: EnderecoWhereInput
    orderBy?: Enumerable<EnderecoOrderByWithRelationInput>
    cursor?: EnderecoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<EnderecoScalarFieldEnum>
  }


  /**
   * Estacionamento without action
   */
  export type EstacionamentoArgs = {
    /**
     * Select specific fields to fetch from the Estacionamento
     */
    select?: EstacionamentoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EstacionamentoInclude | null
  }



  /**
   * Model Administrador
   */


  export type AggregateAdministrador = {
    _count: AdministradorCountAggregateOutputType | null
    _avg: AdministradorAvgAggregateOutputType | null
    _sum: AdministradorSumAggregateOutputType | null
    _min: AdministradorMinAggregateOutputType | null
    _max: AdministradorMaxAggregateOutputType | null
  }

  export type AdministradorAvgAggregateOutputType = {
    id: number | null
  }

  export type AdministradorSumAggregateOutputType = {
    id: number | null
  }

  export type AdministradorMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    nome: string | null
    email: string | null
    uuid_firebase: string | null
  }

  export type AdministradorMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    nome: string | null
    email: string | null
    uuid_firebase: string | null
  }

  export type AdministradorCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    nome: number
    email: number
    uuid_firebase: number
    _all: number
  }


  export type AdministradorAvgAggregateInputType = {
    id?: true
  }

  export type AdministradorSumAggregateInputType = {
    id?: true
  }

  export type AdministradorMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    nome?: true
    email?: true
    uuid_firebase?: true
  }

  export type AdministradorMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    nome?: true
    email?: true
    uuid_firebase?: true
  }

  export type AdministradorCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    nome?: true
    email?: true
    uuid_firebase?: true
    _all?: true
  }

  export type AdministradorAggregateArgs = {
    /**
     * Filter which Administrador to aggregate.
     */
    where?: AdministradorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Administradors to fetch.
     */
    orderBy?: Enumerable<AdministradorOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AdministradorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Administradors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Administradors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Administradors
    **/
    _count?: true | AdministradorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AdministradorAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AdministradorSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AdministradorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AdministradorMaxAggregateInputType
  }

  export type GetAdministradorAggregateType<T extends AdministradorAggregateArgs> = {
        [P in keyof T & keyof AggregateAdministrador]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAdministrador[P]>
      : GetScalarType<T[P], AggregateAdministrador[P]>
  }




  export type AdministradorGroupByArgs = {
    where?: AdministradorWhereInput
    orderBy?: Enumerable<AdministradorOrderByWithAggregationInput>
    by: AdministradorScalarFieldEnum[]
    having?: AdministradorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AdministradorCountAggregateInputType | true
    _avg?: AdministradorAvgAggregateInputType
    _sum?: AdministradorSumAggregateInputType
    _min?: AdministradorMinAggregateInputType
    _max?: AdministradorMaxAggregateInputType
  }


  export type AdministradorGroupByOutputType = {
    id: number
    createdAt: Date
    updatedAt: Date
    nome: string
    email: string
    uuid_firebase: string
    _count: AdministradorCountAggregateOutputType | null
    _avg: AdministradorAvgAggregateOutputType | null
    _sum: AdministradorSumAggregateOutputType | null
    _min: AdministradorMinAggregateOutputType | null
    _max: AdministradorMaxAggregateOutputType | null
  }

  type GetAdministradorGroupByPayload<T extends AdministradorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<AdministradorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AdministradorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AdministradorGroupByOutputType[P]>
            : GetScalarType<T[P], AdministradorGroupByOutputType[P]>
        }
      >
    >


  export type AdministradorSelect = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    nome?: boolean
    email?: boolean
    uuid_firebase?: boolean
    estacionamentos?: boolean | Administrador$estacionamentosArgs
    _count?: boolean | AdministradorCountOutputTypeArgs
  }


  export type AdministradorInclude = {
    estacionamentos?: boolean | Administrador$estacionamentosArgs
    _count?: boolean | AdministradorCountOutputTypeArgs
  }

  export type AdministradorGetPayload<S extends boolean | null | undefined | AdministradorArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Administrador :
    S extends undefined ? never :
    S extends { include: any } & (AdministradorArgs | AdministradorFindManyArgs)
    ? Administrador  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'estacionamentos' ? Array < EstacionamentoAndAdministradoresGetPayload<S['include'][P]>>  :
        P extends '_count' ? AdministradorCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (AdministradorArgs | AdministradorFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'estacionamentos' ? Array < EstacionamentoAndAdministradoresGetPayload<S['select'][P]>>  :
        P extends '_count' ? AdministradorCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Administrador ? Administrador[P] : never
  } 
      : Administrador


  type AdministradorCountArgs = 
    Omit<AdministradorFindManyArgs, 'select' | 'include'> & {
      select?: AdministradorCountAggregateInputType | true
    }

  export interface AdministradorDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Administrador that matches the filter.
     * @param {AdministradorFindUniqueArgs} args - Arguments to find a Administrador
     * @example
     * // Get one Administrador
     * const administrador = await prisma.administrador.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AdministradorFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, AdministradorFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Administrador'> extends True ? Prisma__AdministradorClient<AdministradorGetPayload<T>> : Prisma__AdministradorClient<AdministradorGetPayload<T> | null, null>

    /**
     * Find one Administrador that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AdministradorFindUniqueOrThrowArgs} args - Arguments to find a Administrador
     * @example
     * // Get one Administrador
     * const administrador = await prisma.administrador.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AdministradorFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, AdministradorFindUniqueOrThrowArgs>
    ): Prisma__AdministradorClient<AdministradorGetPayload<T>>

    /**
     * Find the first Administrador that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdministradorFindFirstArgs} args - Arguments to find a Administrador
     * @example
     * // Get one Administrador
     * const administrador = await prisma.administrador.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AdministradorFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, AdministradorFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Administrador'> extends True ? Prisma__AdministradorClient<AdministradorGetPayload<T>> : Prisma__AdministradorClient<AdministradorGetPayload<T> | null, null>

    /**
     * Find the first Administrador that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdministradorFindFirstOrThrowArgs} args - Arguments to find a Administrador
     * @example
     * // Get one Administrador
     * const administrador = await prisma.administrador.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AdministradorFindFirstOrThrowArgs>(
      args?: SelectSubset<T, AdministradorFindFirstOrThrowArgs>
    ): Prisma__AdministradorClient<AdministradorGetPayload<T>>

    /**
     * Find zero or more Administradors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdministradorFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Administradors
     * const administradors = await prisma.administrador.findMany()
     * 
     * // Get first 10 Administradors
     * const administradors = await prisma.administrador.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const administradorWithIdOnly = await prisma.administrador.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AdministradorFindManyArgs>(
      args?: SelectSubset<T, AdministradorFindManyArgs>
    ): Prisma.PrismaPromise<Array<AdministradorGetPayload<T>>>

    /**
     * Create a Administrador.
     * @param {AdministradorCreateArgs} args - Arguments to create a Administrador.
     * @example
     * // Create one Administrador
     * const Administrador = await prisma.administrador.create({
     *   data: {
     *     // ... data to create a Administrador
     *   }
     * })
     * 
    **/
    create<T extends AdministradorCreateArgs>(
      args: SelectSubset<T, AdministradorCreateArgs>
    ): Prisma__AdministradorClient<AdministradorGetPayload<T>>

    /**
     * Create many Administradors.
     *     @param {AdministradorCreateManyArgs} args - Arguments to create many Administradors.
     *     @example
     *     // Create many Administradors
     *     const administrador = await prisma.administrador.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AdministradorCreateManyArgs>(
      args?: SelectSubset<T, AdministradorCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Administrador.
     * @param {AdministradorDeleteArgs} args - Arguments to delete one Administrador.
     * @example
     * // Delete one Administrador
     * const Administrador = await prisma.administrador.delete({
     *   where: {
     *     // ... filter to delete one Administrador
     *   }
     * })
     * 
    **/
    delete<T extends AdministradorDeleteArgs>(
      args: SelectSubset<T, AdministradorDeleteArgs>
    ): Prisma__AdministradorClient<AdministradorGetPayload<T>>

    /**
     * Update one Administrador.
     * @param {AdministradorUpdateArgs} args - Arguments to update one Administrador.
     * @example
     * // Update one Administrador
     * const administrador = await prisma.administrador.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AdministradorUpdateArgs>(
      args: SelectSubset<T, AdministradorUpdateArgs>
    ): Prisma__AdministradorClient<AdministradorGetPayload<T>>

    /**
     * Delete zero or more Administradors.
     * @param {AdministradorDeleteManyArgs} args - Arguments to filter Administradors to delete.
     * @example
     * // Delete a few Administradors
     * const { count } = await prisma.administrador.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AdministradorDeleteManyArgs>(
      args?: SelectSubset<T, AdministradorDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Administradors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdministradorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Administradors
     * const administrador = await prisma.administrador.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AdministradorUpdateManyArgs>(
      args: SelectSubset<T, AdministradorUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Administrador.
     * @param {AdministradorUpsertArgs} args - Arguments to update or create a Administrador.
     * @example
     * // Update or create a Administrador
     * const administrador = await prisma.administrador.upsert({
     *   create: {
     *     // ... data to create a Administrador
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Administrador we want to update
     *   }
     * })
    **/
    upsert<T extends AdministradorUpsertArgs>(
      args: SelectSubset<T, AdministradorUpsertArgs>
    ): Prisma__AdministradorClient<AdministradorGetPayload<T>>

    /**
     * Count the number of Administradors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdministradorCountArgs} args - Arguments to filter Administradors to count.
     * @example
     * // Count the number of Administradors
     * const count = await prisma.administrador.count({
     *   where: {
     *     // ... the filter for the Administradors we want to count
     *   }
     * })
    **/
    count<T extends AdministradorCountArgs>(
      args?: Subset<T, AdministradorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AdministradorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Administrador.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdministradorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AdministradorAggregateArgs>(args: Subset<T, AdministradorAggregateArgs>): Prisma.PrismaPromise<GetAdministradorAggregateType<T>>

    /**
     * Group by Administrador.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdministradorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AdministradorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AdministradorGroupByArgs['orderBy'] }
        : { orderBy?: AdministradorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AdministradorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAdministradorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Administrador.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__AdministradorClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    estacionamentos<T extends Administrador$estacionamentosArgs= {}>(args?: Subset<T, Administrador$estacionamentosArgs>): Prisma.PrismaPromise<Array<EstacionamentoAndAdministradoresGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Administrador base type for findUnique actions
   */
  export type AdministradorFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Administrador
     */
    select?: AdministradorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AdministradorInclude | null
    /**
     * Filter, which Administrador to fetch.
     */
    where: AdministradorWhereUniqueInput
  }

  /**
   * Administrador findUnique
   */
  export interface AdministradorFindUniqueArgs extends AdministradorFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Administrador findUniqueOrThrow
   */
  export type AdministradorFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Administrador
     */
    select?: AdministradorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AdministradorInclude | null
    /**
     * Filter, which Administrador to fetch.
     */
    where: AdministradorWhereUniqueInput
  }


  /**
   * Administrador base type for findFirst actions
   */
  export type AdministradorFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Administrador
     */
    select?: AdministradorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AdministradorInclude | null
    /**
     * Filter, which Administrador to fetch.
     */
    where?: AdministradorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Administradors to fetch.
     */
    orderBy?: Enumerable<AdministradorOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Administradors.
     */
    cursor?: AdministradorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Administradors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Administradors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Administradors.
     */
    distinct?: Enumerable<AdministradorScalarFieldEnum>
  }

  /**
   * Administrador findFirst
   */
  export interface AdministradorFindFirstArgs extends AdministradorFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Administrador findFirstOrThrow
   */
  export type AdministradorFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Administrador
     */
    select?: AdministradorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AdministradorInclude | null
    /**
     * Filter, which Administrador to fetch.
     */
    where?: AdministradorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Administradors to fetch.
     */
    orderBy?: Enumerable<AdministradorOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Administradors.
     */
    cursor?: AdministradorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Administradors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Administradors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Administradors.
     */
    distinct?: Enumerable<AdministradorScalarFieldEnum>
  }


  /**
   * Administrador findMany
   */
  export type AdministradorFindManyArgs = {
    /**
     * Select specific fields to fetch from the Administrador
     */
    select?: AdministradorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AdministradorInclude | null
    /**
     * Filter, which Administradors to fetch.
     */
    where?: AdministradorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Administradors to fetch.
     */
    orderBy?: Enumerable<AdministradorOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Administradors.
     */
    cursor?: AdministradorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Administradors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Administradors.
     */
    skip?: number
    distinct?: Enumerable<AdministradorScalarFieldEnum>
  }


  /**
   * Administrador create
   */
  export type AdministradorCreateArgs = {
    /**
     * Select specific fields to fetch from the Administrador
     */
    select?: AdministradorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AdministradorInclude | null
    /**
     * The data needed to create a Administrador.
     */
    data: XOR<AdministradorCreateInput, AdministradorUncheckedCreateInput>
  }


  /**
   * Administrador createMany
   */
  export type AdministradorCreateManyArgs = {
    /**
     * The data used to create many Administradors.
     */
    data: Enumerable<AdministradorCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Administrador update
   */
  export type AdministradorUpdateArgs = {
    /**
     * Select specific fields to fetch from the Administrador
     */
    select?: AdministradorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AdministradorInclude | null
    /**
     * The data needed to update a Administrador.
     */
    data: XOR<AdministradorUpdateInput, AdministradorUncheckedUpdateInput>
    /**
     * Choose, which Administrador to update.
     */
    where: AdministradorWhereUniqueInput
  }


  /**
   * Administrador updateMany
   */
  export type AdministradorUpdateManyArgs = {
    /**
     * The data used to update Administradors.
     */
    data: XOR<AdministradorUpdateManyMutationInput, AdministradorUncheckedUpdateManyInput>
    /**
     * Filter which Administradors to update
     */
    where?: AdministradorWhereInput
  }


  /**
   * Administrador upsert
   */
  export type AdministradorUpsertArgs = {
    /**
     * Select specific fields to fetch from the Administrador
     */
    select?: AdministradorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AdministradorInclude | null
    /**
     * The filter to search for the Administrador to update in case it exists.
     */
    where: AdministradorWhereUniqueInput
    /**
     * In case the Administrador found by the `where` argument doesn't exist, create a new Administrador with this data.
     */
    create: XOR<AdministradorCreateInput, AdministradorUncheckedCreateInput>
    /**
     * In case the Administrador was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AdministradorUpdateInput, AdministradorUncheckedUpdateInput>
  }


  /**
   * Administrador delete
   */
  export type AdministradorDeleteArgs = {
    /**
     * Select specific fields to fetch from the Administrador
     */
    select?: AdministradorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AdministradorInclude | null
    /**
     * Filter which Administrador to delete.
     */
    where: AdministradorWhereUniqueInput
  }


  /**
   * Administrador deleteMany
   */
  export type AdministradorDeleteManyArgs = {
    /**
     * Filter which Administradors to delete
     */
    where?: AdministradorWhereInput
  }


  /**
   * Administrador.estacionamentos
   */
  export type Administrador$estacionamentosArgs = {
    /**
     * Select specific fields to fetch from the EstacionamentoAndAdministradores
     */
    select?: EstacionamentoAndAdministradoresSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EstacionamentoAndAdministradoresInclude | null
    where?: EstacionamentoAndAdministradoresWhereInput
    orderBy?: Enumerable<EstacionamentoAndAdministradoresOrderByWithRelationInput>
    cursor?: EstacionamentoAndAdministradoresWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<EstacionamentoAndAdministradoresScalarFieldEnum>
  }


  /**
   * Administrador without action
   */
  export type AdministradorArgs = {
    /**
     * Select specific fields to fetch from the Administrador
     */
    select?: AdministradorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AdministradorInclude | null
  }



  /**
   * Model EstacionamentoAndAdministradores
   */


  export type AggregateEstacionamentoAndAdministradores = {
    _count: EstacionamentoAndAdministradoresCountAggregateOutputType | null
    _avg: EstacionamentoAndAdministradoresAvgAggregateOutputType | null
    _sum: EstacionamentoAndAdministradoresSumAggregateOutputType | null
    _min: EstacionamentoAndAdministradoresMinAggregateOutputType | null
    _max: EstacionamentoAndAdministradoresMaxAggregateOutputType | null
  }

  export type EstacionamentoAndAdministradoresAvgAggregateOutputType = {
    id_estacionamento: number | null
    id_administrador: number | null
  }

  export type EstacionamentoAndAdministradoresSumAggregateOutputType = {
    id_estacionamento: number | null
    id_administrador: number | null
  }

  export type EstacionamentoAndAdministradoresMinAggregateOutputType = {
    id_estacionamento: number | null
    id_administrador: number | null
  }

  export type EstacionamentoAndAdministradoresMaxAggregateOutputType = {
    id_estacionamento: number | null
    id_administrador: number | null
  }

  export type EstacionamentoAndAdministradoresCountAggregateOutputType = {
    id_estacionamento: number
    id_administrador: number
    _all: number
  }


  export type EstacionamentoAndAdministradoresAvgAggregateInputType = {
    id_estacionamento?: true
    id_administrador?: true
  }

  export type EstacionamentoAndAdministradoresSumAggregateInputType = {
    id_estacionamento?: true
    id_administrador?: true
  }

  export type EstacionamentoAndAdministradoresMinAggregateInputType = {
    id_estacionamento?: true
    id_administrador?: true
  }

  export type EstacionamentoAndAdministradoresMaxAggregateInputType = {
    id_estacionamento?: true
    id_administrador?: true
  }

  export type EstacionamentoAndAdministradoresCountAggregateInputType = {
    id_estacionamento?: true
    id_administrador?: true
    _all?: true
  }

  export type EstacionamentoAndAdministradoresAggregateArgs = {
    /**
     * Filter which EstacionamentoAndAdministradores to aggregate.
     */
    where?: EstacionamentoAndAdministradoresWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EstacionamentoAndAdministradores to fetch.
     */
    orderBy?: Enumerable<EstacionamentoAndAdministradoresOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EstacionamentoAndAdministradoresWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EstacionamentoAndAdministradores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EstacionamentoAndAdministradores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned EstacionamentoAndAdministradores
    **/
    _count?: true | EstacionamentoAndAdministradoresCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EstacionamentoAndAdministradoresAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EstacionamentoAndAdministradoresSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EstacionamentoAndAdministradoresMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EstacionamentoAndAdministradoresMaxAggregateInputType
  }

  export type GetEstacionamentoAndAdministradoresAggregateType<T extends EstacionamentoAndAdministradoresAggregateArgs> = {
        [P in keyof T & keyof AggregateEstacionamentoAndAdministradores]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEstacionamentoAndAdministradores[P]>
      : GetScalarType<T[P], AggregateEstacionamentoAndAdministradores[P]>
  }




  export type EstacionamentoAndAdministradoresGroupByArgs = {
    where?: EstacionamentoAndAdministradoresWhereInput
    orderBy?: Enumerable<EstacionamentoAndAdministradoresOrderByWithAggregationInput>
    by: EstacionamentoAndAdministradoresScalarFieldEnum[]
    having?: EstacionamentoAndAdministradoresScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EstacionamentoAndAdministradoresCountAggregateInputType | true
    _avg?: EstacionamentoAndAdministradoresAvgAggregateInputType
    _sum?: EstacionamentoAndAdministradoresSumAggregateInputType
    _min?: EstacionamentoAndAdministradoresMinAggregateInputType
    _max?: EstacionamentoAndAdministradoresMaxAggregateInputType
  }


  export type EstacionamentoAndAdministradoresGroupByOutputType = {
    id_estacionamento: number
    id_administrador: number
    _count: EstacionamentoAndAdministradoresCountAggregateOutputType | null
    _avg: EstacionamentoAndAdministradoresAvgAggregateOutputType | null
    _sum: EstacionamentoAndAdministradoresSumAggregateOutputType | null
    _min: EstacionamentoAndAdministradoresMinAggregateOutputType | null
    _max: EstacionamentoAndAdministradoresMaxAggregateOutputType | null
  }

  type GetEstacionamentoAndAdministradoresGroupByPayload<T extends EstacionamentoAndAdministradoresGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<EstacionamentoAndAdministradoresGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EstacionamentoAndAdministradoresGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EstacionamentoAndAdministradoresGroupByOutputType[P]>
            : GetScalarType<T[P], EstacionamentoAndAdministradoresGroupByOutputType[P]>
        }
      >
    >


  export type EstacionamentoAndAdministradoresSelect = {
    id_estacionamento?: boolean
    id_administrador?: boolean
    estacionamento?: boolean | EstacionamentoArgs
    administrador?: boolean | AdministradorArgs
  }


  export type EstacionamentoAndAdministradoresInclude = {
    estacionamento?: boolean | EstacionamentoArgs
    administrador?: boolean | AdministradorArgs
  }

  export type EstacionamentoAndAdministradoresGetPayload<S extends boolean | null | undefined | EstacionamentoAndAdministradoresArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? EstacionamentoAndAdministradores :
    S extends undefined ? never :
    S extends { include: any } & (EstacionamentoAndAdministradoresArgs | EstacionamentoAndAdministradoresFindManyArgs)
    ? EstacionamentoAndAdministradores  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'estacionamento' ? EstacionamentoGetPayload<S['include'][P]> :
        P extends 'administrador' ? AdministradorGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (EstacionamentoAndAdministradoresArgs | EstacionamentoAndAdministradoresFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'estacionamento' ? EstacionamentoGetPayload<S['select'][P]> :
        P extends 'administrador' ? AdministradorGetPayload<S['select'][P]> :  P extends keyof EstacionamentoAndAdministradores ? EstacionamentoAndAdministradores[P] : never
  } 
      : EstacionamentoAndAdministradores


  type EstacionamentoAndAdministradoresCountArgs = 
    Omit<EstacionamentoAndAdministradoresFindManyArgs, 'select' | 'include'> & {
      select?: EstacionamentoAndAdministradoresCountAggregateInputType | true
    }

  export interface EstacionamentoAndAdministradoresDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one EstacionamentoAndAdministradores that matches the filter.
     * @param {EstacionamentoAndAdministradoresFindUniqueArgs} args - Arguments to find a EstacionamentoAndAdministradores
     * @example
     * // Get one EstacionamentoAndAdministradores
     * const estacionamentoAndAdministradores = await prisma.estacionamentoAndAdministradores.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends EstacionamentoAndAdministradoresFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, EstacionamentoAndAdministradoresFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'EstacionamentoAndAdministradores'> extends True ? Prisma__EstacionamentoAndAdministradoresClient<EstacionamentoAndAdministradoresGetPayload<T>> : Prisma__EstacionamentoAndAdministradoresClient<EstacionamentoAndAdministradoresGetPayload<T> | null, null>

    /**
     * Find one EstacionamentoAndAdministradores that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {EstacionamentoAndAdministradoresFindUniqueOrThrowArgs} args - Arguments to find a EstacionamentoAndAdministradores
     * @example
     * // Get one EstacionamentoAndAdministradores
     * const estacionamentoAndAdministradores = await prisma.estacionamentoAndAdministradores.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends EstacionamentoAndAdministradoresFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, EstacionamentoAndAdministradoresFindUniqueOrThrowArgs>
    ): Prisma__EstacionamentoAndAdministradoresClient<EstacionamentoAndAdministradoresGetPayload<T>>

    /**
     * Find the first EstacionamentoAndAdministradores that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EstacionamentoAndAdministradoresFindFirstArgs} args - Arguments to find a EstacionamentoAndAdministradores
     * @example
     * // Get one EstacionamentoAndAdministradores
     * const estacionamentoAndAdministradores = await prisma.estacionamentoAndAdministradores.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends EstacionamentoAndAdministradoresFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, EstacionamentoAndAdministradoresFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'EstacionamentoAndAdministradores'> extends True ? Prisma__EstacionamentoAndAdministradoresClient<EstacionamentoAndAdministradoresGetPayload<T>> : Prisma__EstacionamentoAndAdministradoresClient<EstacionamentoAndAdministradoresGetPayload<T> | null, null>

    /**
     * Find the first EstacionamentoAndAdministradores that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EstacionamentoAndAdministradoresFindFirstOrThrowArgs} args - Arguments to find a EstacionamentoAndAdministradores
     * @example
     * // Get one EstacionamentoAndAdministradores
     * const estacionamentoAndAdministradores = await prisma.estacionamentoAndAdministradores.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends EstacionamentoAndAdministradoresFindFirstOrThrowArgs>(
      args?: SelectSubset<T, EstacionamentoAndAdministradoresFindFirstOrThrowArgs>
    ): Prisma__EstacionamentoAndAdministradoresClient<EstacionamentoAndAdministradoresGetPayload<T>>

    /**
     * Find zero or more EstacionamentoAndAdministradores that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EstacionamentoAndAdministradoresFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all EstacionamentoAndAdministradores
     * const estacionamentoAndAdministradores = await prisma.estacionamentoAndAdministradores.findMany()
     * 
     * // Get first 10 EstacionamentoAndAdministradores
     * const estacionamentoAndAdministradores = await prisma.estacionamentoAndAdministradores.findMany({ take: 10 })
     * 
     * // Only select the `id_estacionamento`
     * const estacionamentoAndAdministradoresWithId_estacionamentoOnly = await prisma.estacionamentoAndAdministradores.findMany({ select: { id_estacionamento: true } })
     * 
    **/
    findMany<T extends EstacionamentoAndAdministradoresFindManyArgs>(
      args?: SelectSubset<T, EstacionamentoAndAdministradoresFindManyArgs>
    ): Prisma.PrismaPromise<Array<EstacionamentoAndAdministradoresGetPayload<T>>>

    /**
     * Create a EstacionamentoAndAdministradores.
     * @param {EstacionamentoAndAdministradoresCreateArgs} args - Arguments to create a EstacionamentoAndAdministradores.
     * @example
     * // Create one EstacionamentoAndAdministradores
     * const EstacionamentoAndAdministradores = await prisma.estacionamentoAndAdministradores.create({
     *   data: {
     *     // ... data to create a EstacionamentoAndAdministradores
     *   }
     * })
     * 
    **/
    create<T extends EstacionamentoAndAdministradoresCreateArgs>(
      args: SelectSubset<T, EstacionamentoAndAdministradoresCreateArgs>
    ): Prisma__EstacionamentoAndAdministradoresClient<EstacionamentoAndAdministradoresGetPayload<T>>

    /**
     * Create many EstacionamentoAndAdministradores.
     *     @param {EstacionamentoAndAdministradoresCreateManyArgs} args - Arguments to create many EstacionamentoAndAdministradores.
     *     @example
     *     // Create many EstacionamentoAndAdministradores
     *     const estacionamentoAndAdministradores = await prisma.estacionamentoAndAdministradores.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends EstacionamentoAndAdministradoresCreateManyArgs>(
      args?: SelectSubset<T, EstacionamentoAndAdministradoresCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a EstacionamentoAndAdministradores.
     * @param {EstacionamentoAndAdministradoresDeleteArgs} args - Arguments to delete one EstacionamentoAndAdministradores.
     * @example
     * // Delete one EstacionamentoAndAdministradores
     * const EstacionamentoAndAdministradores = await prisma.estacionamentoAndAdministradores.delete({
     *   where: {
     *     // ... filter to delete one EstacionamentoAndAdministradores
     *   }
     * })
     * 
    **/
    delete<T extends EstacionamentoAndAdministradoresDeleteArgs>(
      args: SelectSubset<T, EstacionamentoAndAdministradoresDeleteArgs>
    ): Prisma__EstacionamentoAndAdministradoresClient<EstacionamentoAndAdministradoresGetPayload<T>>

    /**
     * Update one EstacionamentoAndAdministradores.
     * @param {EstacionamentoAndAdministradoresUpdateArgs} args - Arguments to update one EstacionamentoAndAdministradores.
     * @example
     * // Update one EstacionamentoAndAdministradores
     * const estacionamentoAndAdministradores = await prisma.estacionamentoAndAdministradores.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends EstacionamentoAndAdministradoresUpdateArgs>(
      args: SelectSubset<T, EstacionamentoAndAdministradoresUpdateArgs>
    ): Prisma__EstacionamentoAndAdministradoresClient<EstacionamentoAndAdministradoresGetPayload<T>>

    /**
     * Delete zero or more EstacionamentoAndAdministradores.
     * @param {EstacionamentoAndAdministradoresDeleteManyArgs} args - Arguments to filter EstacionamentoAndAdministradores to delete.
     * @example
     * // Delete a few EstacionamentoAndAdministradores
     * const { count } = await prisma.estacionamentoAndAdministradores.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends EstacionamentoAndAdministradoresDeleteManyArgs>(
      args?: SelectSubset<T, EstacionamentoAndAdministradoresDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EstacionamentoAndAdministradores.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EstacionamentoAndAdministradoresUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many EstacionamentoAndAdministradores
     * const estacionamentoAndAdministradores = await prisma.estacionamentoAndAdministradores.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends EstacionamentoAndAdministradoresUpdateManyArgs>(
      args: SelectSubset<T, EstacionamentoAndAdministradoresUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one EstacionamentoAndAdministradores.
     * @param {EstacionamentoAndAdministradoresUpsertArgs} args - Arguments to update or create a EstacionamentoAndAdministradores.
     * @example
     * // Update or create a EstacionamentoAndAdministradores
     * const estacionamentoAndAdministradores = await prisma.estacionamentoAndAdministradores.upsert({
     *   create: {
     *     // ... data to create a EstacionamentoAndAdministradores
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the EstacionamentoAndAdministradores we want to update
     *   }
     * })
    **/
    upsert<T extends EstacionamentoAndAdministradoresUpsertArgs>(
      args: SelectSubset<T, EstacionamentoAndAdministradoresUpsertArgs>
    ): Prisma__EstacionamentoAndAdministradoresClient<EstacionamentoAndAdministradoresGetPayload<T>>

    /**
     * Count the number of EstacionamentoAndAdministradores.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EstacionamentoAndAdministradoresCountArgs} args - Arguments to filter EstacionamentoAndAdministradores to count.
     * @example
     * // Count the number of EstacionamentoAndAdministradores
     * const count = await prisma.estacionamentoAndAdministradores.count({
     *   where: {
     *     // ... the filter for the EstacionamentoAndAdministradores we want to count
     *   }
     * })
    **/
    count<T extends EstacionamentoAndAdministradoresCountArgs>(
      args?: Subset<T, EstacionamentoAndAdministradoresCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EstacionamentoAndAdministradoresCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a EstacionamentoAndAdministradores.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EstacionamentoAndAdministradoresAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EstacionamentoAndAdministradoresAggregateArgs>(args: Subset<T, EstacionamentoAndAdministradoresAggregateArgs>): Prisma.PrismaPromise<GetEstacionamentoAndAdministradoresAggregateType<T>>

    /**
     * Group by EstacionamentoAndAdministradores.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EstacionamentoAndAdministradoresGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EstacionamentoAndAdministradoresGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EstacionamentoAndAdministradoresGroupByArgs['orderBy'] }
        : { orderBy?: EstacionamentoAndAdministradoresGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EstacionamentoAndAdministradoresGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEstacionamentoAndAdministradoresGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for EstacionamentoAndAdministradores.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__EstacionamentoAndAdministradoresClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    estacionamento<T extends EstacionamentoArgs= {}>(args?: Subset<T, EstacionamentoArgs>): Prisma__EstacionamentoClient<EstacionamentoGetPayload<T> | Null>;

    administrador<T extends AdministradorArgs= {}>(args?: Subset<T, AdministradorArgs>): Prisma__AdministradorClient<AdministradorGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * EstacionamentoAndAdministradores base type for findUnique actions
   */
  export type EstacionamentoAndAdministradoresFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the EstacionamentoAndAdministradores
     */
    select?: EstacionamentoAndAdministradoresSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EstacionamentoAndAdministradoresInclude | null
    /**
     * Filter, which EstacionamentoAndAdministradores to fetch.
     */
    where: EstacionamentoAndAdministradoresWhereUniqueInput
  }

  /**
   * EstacionamentoAndAdministradores findUnique
   */
  export interface EstacionamentoAndAdministradoresFindUniqueArgs extends EstacionamentoAndAdministradoresFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * EstacionamentoAndAdministradores findUniqueOrThrow
   */
  export type EstacionamentoAndAdministradoresFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the EstacionamentoAndAdministradores
     */
    select?: EstacionamentoAndAdministradoresSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EstacionamentoAndAdministradoresInclude | null
    /**
     * Filter, which EstacionamentoAndAdministradores to fetch.
     */
    where: EstacionamentoAndAdministradoresWhereUniqueInput
  }


  /**
   * EstacionamentoAndAdministradores base type for findFirst actions
   */
  export type EstacionamentoAndAdministradoresFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the EstacionamentoAndAdministradores
     */
    select?: EstacionamentoAndAdministradoresSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EstacionamentoAndAdministradoresInclude | null
    /**
     * Filter, which EstacionamentoAndAdministradores to fetch.
     */
    where?: EstacionamentoAndAdministradoresWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EstacionamentoAndAdministradores to fetch.
     */
    orderBy?: Enumerable<EstacionamentoAndAdministradoresOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EstacionamentoAndAdministradores.
     */
    cursor?: EstacionamentoAndAdministradoresWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EstacionamentoAndAdministradores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EstacionamentoAndAdministradores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EstacionamentoAndAdministradores.
     */
    distinct?: Enumerable<EstacionamentoAndAdministradoresScalarFieldEnum>
  }

  /**
   * EstacionamentoAndAdministradores findFirst
   */
  export interface EstacionamentoAndAdministradoresFindFirstArgs extends EstacionamentoAndAdministradoresFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * EstacionamentoAndAdministradores findFirstOrThrow
   */
  export type EstacionamentoAndAdministradoresFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the EstacionamentoAndAdministradores
     */
    select?: EstacionamentoAndAdministradoresSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EstacionamentoAndAdministradoresInclude | null
    /**
     * Filter, which EstacionamentoAndAdministradores to fetch.
     */
    where?: EstacionamentoAndAdministradoresWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EstacionamentoAndAdministradores to fetch.
     */
    orderBy?: Enumerable<EstacionamentoAndAdministradoresOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EstacionamentoAndAdministradores.
     */
    cursor?: EstacionamentoAndAdministradoresWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EstacionamentoAndAdministradores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EstacionamentoAndAdministradores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EstacionamentoAndAdministradores.
     */
    distinct?: Enumerable<EstacionamentoAndAdministradoresScalarFieldEnum>
  }


  /**
   * EstacionamentoAndAdministradores findMany
   */
  export type EstacionamentoAndAdministradoresFindManyArgs = {
    /**
     * Select specific fields to fetch from the EstacionamentoAndAdministradores
     */
    select?: EstacionamentoAndAdministradoresSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EstacionamentoAndAdministradoresInclude | null
    /**
     * Filter, which EstacionamentoAndAdministradores to fetch.
     */
    where?: EstacionamentoAndAdministradoresWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EstacionamentoAndAdministradores to fetch.
     */
    orderBy?: Enumerable<EstacionamentoAndAdministradoresOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing EstacionamentoAndAdministradores.
     */
    cursor?: EstacionamentoAndAdministradoresWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EstacionamentoAndAdministradores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EstacionamentoAndAdministradores.
     */
    skip?: number
    distinct?: Enumerable<EstacionamentoAndAdministradoresScalarFieldEnum>
  }


  /**
   * EstacionamentoAndAdministradores create
   */
  export type EstacionamentoAndAdministradoresCreateArgs = {
    /**
     * Select specific fields to fetch from the EstacionamentoAndAdministradores
     */
    select?: EstacionamentoAndAdministradoresSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EstacionamentoAndAdministradoresInclude | null
    /**
     * The data needed to create a EstacionamentoAndAdministradores.
     */
    data: XOR<EstacionamentoAndAdministradoresCreateInput, EstacionamentoAndAdministradoresUncheckedCreateInput>
  }


  /**
   * EstacionamentoAndAdministradores createMany
   */
  export type EstacionamentoAndAdministradoresCreateManyArgs = {
    /**
     * The data used to create many EstacionamentoAndAdministradores.
     */
    data: Enumerable<EstacionamentoAndAdministradoresCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * EstacionamentoAndAdministradores update
   */
  export type EstacionamentoAndAdministradoresUpdateArgs = {
    /**
     * Select specific fields to fetch from the EstacionamentoAndAdministradores
     */
    select?: EstacionamentoAndAdministradoresSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EstacionamentoAndAdministradoresInclude | null
    /**
     * The data needed to update a EstacionamentoAndAdministradores.
     */
    data: XOR<EstacionamentoAndAdministradoresUpdateInput, EstacionamentoAndAdministradoresUncheckedUpdateInput>
    /**
     * Choose, which EstacionamentoAndAdministradores to update.
     */
    where: EstacionamentoAndAdministradoresWhereUniqueInput
  }


  /**
   * EstacionamentoAndAdministradores updateMany
   */
  export type EstacionamentoAndAdministradoresUpdateManyArgs = {
    /**
     * The data used to update EstacionamentoAndAdministradores.
     */
    data: XOR<EstacionamentoAndAdministradoresUpdateManyMutationInput, EstacionamentoAndAdministradoresUncheckedUpdateManyInput>
    /**
     * Filter which EstacionamentoAndAdministradores to update
     */
    where?: EstacionamentoAndAdministradoresWhereInput
  }


  /**
   * EstacionamentoAndAdministradores upsert
   */
  export type EstacionamentoAndAdministradoresUpsertArgs = {
    /**
     * Select specific fields to fetch from the EstacionamentoAndAdministradores
     */
    select?: EstacionamentoAndAdministradoresSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EstacionamentoAndAdministradoresInclude | null
    /**
     * The filter to search for the EstacionamentoAndAdministradores to update in case it exists.
     */
    where: EstacionamentoAndAdministradoresWhereUniqueInput
    /**
     * In case the EstacionamentoAndAdministradores found by the `where` argument doesn't exist, create a new EstacionamentoAndAdministradores with this data.
     */
    create: XOR<EstacionamentoAndAdministradoresCreateInput, EstacionamentoAndAdministradoresUncheckedCreateInput>
    /**
     * In case the EstacionamentoAndAdministradores was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EstacionamentoAndAdministradoresUpdateInput, EstacionamentoAndAdministradoresUncheckedUpdateInput>
  }


  /**
   * EstacionamentoAndAdministradores delete
   */
  export type EstacionamentoAndAdministradoresDeleteArgs = {
    /**
     * Select specific fields to fetch from the EstacionamentoAndAdministradores
     */
    select?: EstacionamentoAndAdministradoresSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EstacionamentoAndAdministradoresInclude | null
    /**
     * Filter which EstacionamentoAndAdministradores to delete.
     */
    where: EstacionamentoAndAdministradoresWhereUniqueInput
  }


  /**
   * EstacionamentoAndAdministradores deleteMany
   */
  export type EstacionamentoAndAdministradoresDeleteManyArgs = {
    /**
     * Filter which EstacionamentoAndAdministradores to delete
     */
    where?: EstacionamentoAndAdministradoresWhereInput
  }


  /**
   * EstacionamentoAndAdministradores without action
   */
  export type EstacionamentoAndAdministradoresArgs = {
    /**
     * Select specific fields to fetch from the EstacionamentoAndAdministradores
     */
    select?: EstacionamentoAndAdministradoresSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EstacionamentoAndAdministradoresInclude | null
  }



  /**
   * Model Endereco
   */


  export type AggregateEndereco = {
    _count: EnderecoCountAggregateOutputType | null
    _avg: EnderecoAvgAggregateOutputType | null
    _sum: EnderecoSumAggregateOutputType | null
    _min: EnderecoMinAggregateOutputType | null
    _max: EnderecoMaxAggregateOutputType | null
  }

  export type EnderecoAvgAggregateOutputType = {
    id: number | null
    cep: number | null
    numero: number | null
    id_estacionamento: number | null
  }

  export type EnderecoSumAggregateOutputType = {
    id: number | null
    cep: number | null
    numero: number | null
    id_estacionamento: number | null
  }

  export type EnderecoMinAggregateOutputType = {
    id: number | null
    cep: number | null
    bairro: string | null
    endereco: string | null
    numero: number | null
    cidade: string | null
    uf: string | null
    id_estacionamento: number | null
  }

  export type EnderecoMaxAggregateOutputType = {
    id: number | null
    cep: number | null
    bairro: string | null
    endereco: string | null
    numero: number | null
    cidade: string | null
    uf: string | null
    id_estacionamento: number | null
  }

  export type EnderecoCountAggregateOutputType = {
    id: number
    cep: number
    bairro: number
    endereco: number
    numero: number
    cidade: number
    uf: number
    id_estacionamento: number
    _all: number
  }


  export type EnderecoAvgAggregateInputType = {
    id?: true
    cep?: true
    numero?: true
    id_estacionamento?: true
  }

  export type EnderecoSumAggregateInputType = {
    id?: true
    cep?: true
    numero?: true
    id_estacionamento?: true
  }

  export type EnderecoMinAggregateInputType = {
    id?: true
    cep?: true
    bairro?: true
    endereco?: true
    numero?: true
    cidade?: true
    uf?: true
    id_estacionamento?: true
  }

  export type EnderecoMaxAggregateInputType = {
    id?: true
    cep?: true
    bairro?: true
    endereco?: true
    numero?: true
    cidade?: true
    uf?: true
    id_estacionamento?: true
  }

  export type EnderecoCountAggregateInputType = {
    id?: true
    cep?: true
    bairro?: true
    endereco?: true
    numero?: true
    cidade?: true
    uf?: true
    id_estacionamento?: true
    _all?: true
  }

  export type EnderecoAggregateArgs = {
    /**
     * Filter which Endereco to aggregate.
     */
    where?: EnderecoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Enderecos to fetch.
     */
    orderBy?: Enumerable<EnderecoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EnderecoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Enderecos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Enderecos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Enderecos
    **/
    _count?: true | EnderecoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EnderecoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EnderecoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EnderecoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EnderecoMaxAggregateInputType
  }

  export type GetEnderecoAggregateType<T extends EnderecoAggregateArgs> = {
        [P in keyof T & keyof AggregateEndereco]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEndereco[P]>
      : GetScalarType<T[P], AggregateEndereco[P]>
  }




  export type EnderecoGroupByArgs = {
    where?: EnderecoWhereInput
    orderBy?: Enumerable<EnderecoOrderByWithAggregationInput>
    by: EnderecoScalarFieldEnum[]
    having?: EnderecoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EnderecoCountAggregateInputType | true
    _avg?: EnderecoAvgAggregateInputType
    _sum?: EnderecoSumAggregateInputType
    _min?: EnderecoMinAggregateInputType
    _max?: EnderecoMaxAggregateInputType
  }


  export type EnderecoGroupByOutputType = {
    id: number
    cep: number
    bairro: string
    endereco: string
    numero: number
    cidade: string
    uf: string
    id_estacionamento: number
    _count: EnderecoCountAggregateOutputType | null
    _avg: EnderecoAvgAggregateOutputType | null
    _sum: EnderecoSumAggregateOutputType | null
    _min: EnderecoMinAggregateOutputType | null
    _max: EnderecoMaxAggregateOutputType | null
  }

  type GetEnderecoGroupByPayload<T extends EnderecoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<EnderecoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EnderecoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EnderecoGroupByOutputType[P]>
            : GetScalarType<T[P], EnderecoGroupByOutputType[P]>
        }
      >
    >


  export type EnderecoSelect = {
    id?: boolean
    cep?: boolean
    bairro?: boolean
    endereco?: boolean
    numero?: boolean
    cidade?: boolean
    uf?: boolean
    id_estacionamento?: boolean
    estacionamento?: boolean | EstacionamentoArgs
  }


  export type EnderecoInclude = {
    estacionamento?: boolean | EstacionamentoArgs
  }

  export type EnderecoGetPayload<S extends boolean | null | undefined | EnderecoArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Endereco :
    S extends undefined ? never :
    S extends { include: any } & (EnderecoArgs | EnderecoFindManyArgs)
    ? Endereco  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'estacionamento' ? EstacionamentoGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (EnderecoArgs | EnderecoFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'estacionamento' ? EstacionamentoGetPayload<S['select'][P]> :  P extends keyof Endereco ? Endereco[P] : never
  } 
      : Endereco


  type EnderecoCountArgs = 
    Omit<EnderecoFindManyArgs, 'select' | 'include'> & {
      select?: EnderecoCountAggregateInputType | true
    }

  export interface EnderecoDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Endereco that matches the filter.
     * @param {EnderecoFindUniqueArgs} args - Arguments to find a Endereco
     * @example
     * // Get one Endereco
     * const endereco = await prisma.endereco.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends EnderecoFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, EnderecoFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Endereco'> extends True ? Prisma__EnderecoClient<EnderecoGetPayload<T>> : Prisma__EnderecoClient<EnderecoGetPayload<T> | null, null>

    /**
     * Find one Endereco that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {EnderecoFindUniqueOrThrowArgs} args - Arguments to find a Endereco
     * @example
     * // Get one Endereco
     * const endereco = await prisma.endereco.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends EnderecoFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, EnderecoFindUniqueOrThrowArgs>
    ): Prisma__EnderecoClient<EnderecoGetPayload<T>>

    /**
     * Find the first Endereco that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnderecoFindFirstArgs} args - Arguments to find a Endereco
     * @example
     * // Get one Endereco
     * const endereco = await prisma.endereco.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends EnderecoFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, EnderecoFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Endereco'> extends True ? Prisma__EnderecoClient<EnderecoGetPayload<T>> : Prisma__EnderecoClient<EnderecoGetPayload<T> | null, null>

    /**
     * Find the first Endereco that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnderecoFindFirstOrThrowArgs} args - Arguments to find a Endereco
     * @example
     * // Get one Endereco
     * const endereco = await prisma.endereco.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends EnderecoFindFirstOrThrowArgs>(
      args?: SelectSubset<T, EnderecoFindFirstOrThrowArgs>
    ): Prisma__EnderecoClient<EnderecoGetPayload<T>>

    /**
     * Find zero or more Enderecos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnderecoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Enderecos
     * const enderecos = await prisma.endereco.findMany()
     * 
     * // Get first 10 Enderecos
     * const enderecos = await prisma.endereco.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const enderecoWithIdOnly = await prisma.endereco.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends EnderecoFindManyArgs>(
      args?: SelectSubset<T, EnderecoFindManyArgs>
    ): Prisma.PrismaPromise<Array<EnderecoGetPayload<T>>>

    /**
     * Create a Endereco.
     * @param {EnderecoCreateArgs} args - Arguments to create a Endereco.
     * @example
     * // Create one Endereco
     * const Endereco = await prisma.endereco.create({
     *   data: {
     *     // ... data to create a Endereco
     *   }
     * })
     * 
    **/
    create<T extends EnderecoCreateArgs>(
      args: SelectSubset<T, EnderecoCreateArgs>
    ): Prisma__EnderecoClient<EnderecoGetPayload<T>>

    /**
     * Create many Enderecos.
     *     @param {EnderecoCreateManyArgs} args - Arguments to create many Enderecos.
     *     @example
     *     // Create many Enderecos
     *     const endereco = await prisma.endereco.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends EnderecoCreateManyArgs>(
      args?: SelectSubset<T, EnderecoCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Endereco.
     * @param {EnderecoDeleteArgs} args - Arguments to delete one Endereco.
     * @example
     * // Delete one Endereco
     * const Endereco = await prisma.endereco.delete({
     *   where: {
     *     // ... filter to delete one Endereco
     *   }
     * })
     * 
    **/
    delete<T extends EnderecoDeleteArgs>(
      args: SelectSubset<T, EnderecoDeleteArgs>
    ): Prisma__EnderecoClient<EnderecoGetPayload<T>>

    /**
     * Update one Endereco.
     * @param {EnderecoUpdateArgs} args - Arguments to update one Endereco.
     * @example
     * // Update one Endereco
     * const endereco = await prisma.endereco.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends EnderecoUpdateArgs>(
      args: SelectSubset<T, EnderecoUpdateArgs>
    ): Prisma__EnderecoClient<EnderecoGetPayload<T>>

    /**
     * Delete zero or more Enderecos.
     * @param {EnderecoDeleteManyArgs} args - Arguments to filter Enderecos to delete.
     * @example
     * // Delete a few Enderecos
     * const { count } = await prisma.endereco.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends EnderecoDeleteManyArgs>(
      args?: SelectSubset<T, EnderecoDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Enderecos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnderecoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Enderecos
     * const endereco = await prisma.endereco.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends EnderecoUpdateManyArgs>(
      args: SelectSubset<T, EnderecoUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Endereco.
     * @param {EnderecoUpsertArgs} args - Arguments to update or create a Endereco.
     * @example
     * // Update or create a Endereco
     * const endereco = await prisma.endereco.upsert({
     *   create: {
     *     // ... data to create a Endereco
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Endereco we want to update
     *   }
     * })
    **/
    upsert<T extends EnderecoUpsertArgs>(
      args: SelectSubset<T, EnderecoUpsertArgs>
    ): Prisma__EnderecoClient<EnderecoGetPayload<T>>

    /**
     * Count the number of Enderecos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnderecoCountArgs} args - Arguments to filter Enderecos to count.
     * @example
     * // Count the number of Enderecos
     * const count = await prisma.endereco.count({
     *   where: {
     *     // ... the filter for the Enderecos we want to count
     *   }
     * })
    **/
    count<T extends EnderecoCountArgs>(
      args?: Subset<T, EnderecoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EnderecoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Endereco.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnderecoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EnderecoAggregateArgs>(args: Subset<T, EnderecoAggregateArgs>): Prisma.PrismaPromise<GetEnderecoAggregateType<T>>

    /**
     * Group by Endereco.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnderecoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EnderecoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EnderecoGroupByArgs['orderBy'] }
        : { orderBy?: EnderecoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EnderecoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEnderecoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Endereco.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__EnderecoClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    estacionamento<T extends EstacionamentoArgs= {}>(args?: Subset<T, EstacionamentoArgs>): Prisma__EstacionamentoClient<EstacionamentoGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Endereco base type for findUnique actions
   */
  export type EnderecoFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Endereco
     */
    select?: EnderecoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EnderecoInclude | null
    /**
     * Filter, which Endereco to fetch.
     */
    where: EnderecoWhereUniqueInput
  }

  /**
   * Endereco findUnique
   */
  export interface EnderecoFindUniqueArgs extends EnderecoFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Endereco findUniqueOrThrow
   */
  export type EnderecoFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Endereco
     */
    select?: EnderecoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EnderecoInclude | null
    /**
     * Filter, which Endereco to fetch.
     */
    where: EnderecoWhereUniqueInput
  }


  /**
   * Endereco base type for findFirst actions
   */
  export type EnderecoFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Endereco
     */
    select?: EnderecoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EnderecoInclude | null
    /**
     * Filter, which Endereco to fetch.
     */
    where?: EnderecoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Enderecos to fetch.
     */
    orderBy?: Enumerable<EnderecoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Enderecos.
     */
    cursor?: EnderecoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Enderecos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Enderecos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Enderecos.
     */
    distinct?: Enumerable<EnderecoScalarFieldEnum>
  }

  /**
   * Endereco findFirst
   */
  export interface EnderecoFindFirstArgs extends EnderecoFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Endereco findFirstOrThrow
   */
  export type EnderecoFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Endereco
     */
    select?: EnderecoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EnderecoInclude | null
    /**
     * Filter, which Endereco to fetch.
     */
    where?: EnderecoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Enderecos to fetch.
     */
    orderBy?: Enumerable<EnderecoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Enderecos.
     */
    cursor?: EnderecoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Enderecos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Enderecos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Enderecos.
     */
    distinct?: Enumerable<EnderecoScalarFieldEnum>
  }


  /**
   * Endereco findMany
   */
  export type EnderecoFindManyArgs = {
    /**
     * Select specific fields to fetch from the Endereco
     */
    select?: EnderecoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EnderecoInclude | null
    /**
     * Filter, which Enderecos to fetch.
     */
    where?: EnderecoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Enderecos to fetch.
     */
    orderBy?: Enumerable<EnderecoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Enderecos.
     */
    cursor?: EnderecoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Enderecos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Enderecos.
     */
    skip?: number
    distinct?: Enumerable<EnderecoScalarFieldEnum>
  }


  /**
   * Endereco create
   */
  export type EnderecoCreateArgs = {
    /**
     * Select specific fields to fetch from the Endereco
     */
    select?: EnderecoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EnderecoInclude | null
    /**
     * The data needed to create a Endereco.
     */
    data: XOR<EnderecoCreateInput, EnderecoUncheckedCreateInput>
  }


  /**
   * Endereco createMany
   */
  export type EnderecoCreateManyArgs = {
    /**
     * The data used to create many Enderecos.
     */
    data: Enumerable<EnderecoCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Endereco update
   */
  export type EnderecoUpdateArgs = {
    /**
     * Select specific fields to fetch from the Endereco
     */
    select?: EnderecoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EnderecoInclude | null
    /**
     * The data needed to update a Endereco.
     */
    data: XOR<EnderecoUpdateInput, EnderecoUncheckedUpdateInput>
    /**
     * Choose, which Endereco to update.
     */
    where: EnderecoWhereUniqueInput
  }


  /**
   * Endereco updateMany
   */
  export type EnderecoUpdateManyArgs = {
    /**
     * The data used to update Enderecos.
     */
    data: XOR<EnderecoUpdateManyMutationInput, EnderecoUncheckedUpdateManyInput>
    /**
     * Filter which Enderecos to update
     */
    where?: EnderecoWhereInput
  }


  /**
   * Endereco upsert
   */
  export type EnderecoUpsertArgs = {
    /**
     * Select specific fields to fetch from the Endereco
     */
    select?: EnderecoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EnderecoInclude | null
    /**
     * The filter to search for the Endereco to update in case it exists.
     */
    where: EnderecoWhereUniqueInput
    /**
     * In case the Endereco found by the `where` argument doesn't exist, create a new Endereco with this data.
     */
    create: XOR<EnderecoCreateInput, EnderecoUncheckedCreateInput>
    /**
     * In case the Endereco was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EnderecoUpdateInput, EnderecoUncheckedUpdateInput>
  }


  /**
   * Endereco delete
   */
  export type EnderecoDeleteArgs = {
    /**
     * Select specific fields to fetch from the Endereco
     */
    select?: EnderecoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EnderecoInclude | null
    /**
     * Filter which Endereco to delete.
     */
    where: EnderecoWhereUniqueInput
  }


  /**
   * Endereco deleteMany
   */
  export type EnderecoDeleteManyArgs = {
    /**
     * Filter which Enderecos to delete
     */
    where?: EnderecoWhereInput
  }


  /**
   * Endereco without action
   */
  export type EnderecoArgs = {
    /**
     * Select specific fields to fetch from the Endereco
     */
    select?: EnderecoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EnderecoInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const AdministradorScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    nome: 'nome',
    email: 'email',
    uuid_firebase: 'uuid_firebase'
  };

  export type AdministradorScalarFieldEnum = (typeof AdministradorScalarFieldEnum)[keyof typeof AdministradorScalarFieldEnum]


  export const ClienteScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    cpf: 'cpf',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    uuid_firebase: 'uuid_firebase'
  };

  export type ClienteScalarFieldEnum = (typeof ClienteScalarFieldEnum)[keyof typeof ClienteScalarFieldEnum]


  export const EnderecoScalarFieldEnum: {
    id: 'id',
    cep: 'cep',
    bairro: 'bairro',
    endereco: 'endereco',
    numero: 'numero',
    cidade: 'cidade',
    uf: 'uf',
    id_estacionamento: 'id_estacionamento'
  };

  export type EnderecoScalarFieldEnum = (typeof EnderecoScalarFieldEnum)[keyof typeof EnderecoScalarFieldEnum]


  export const EstacionamentoAndAdministradoresScalarFieldEnum: {
    id_estacionamento: 'id_estacionamento',
    id_administrador: 'id_administrador'
  };

  export type EstacionamentoAndAdministradoresScalarFieldEnum = (typeof EstacionamentoAndAdministradoresScalarFieldEnum)[keyof typeof EstacionamentoAndAdministradoresScalarFieldEnum]


  export const EstacionamentoScalarFieldEnum: {
    id: 'id',
    preco: 'preco',
    vagas_preferenciais: 'vagas_preferenciais',
    vagas_gerais: 'vagas_gerais',
    razao_social: 'razao_social',
    cnpj: 'cnpj',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type EstacionamentoScalarFieldEnum = (typeof EstacionamentoScalarFieldEnum)[keyof typeof EstacionamentoScalarFieldEnum]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const VeiculoScalarFieldEnum: {
    id: 'id',
    placa: 'placa',
    modelo: 'modelo',
    id_cliente: 'id_cliente',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type VeiculoScalarFieldEnum = (typeof VeiculoScalarFieldEnum)[keyof typeof VeiculoScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type ClienteWhereInput = {
    AND?: Enumerable<ClienteWhereInput>
    OR?: Enumerable<ClienteWhereInput>
    NOT?: Enumerable<ClienteWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    email?: StringFilter | string
    cpf?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    uuid_firebase?: StringFilter | string
    Veiculo?: VeiculoListRelationFilter
  }

  export type ClienteOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    cpf?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    uuid_firebase?: SortOrder
    Veiculo?: VeiculoOrderByRelationAggregateInput
  }

  export type ClienteWhereUniqueInput = {
    id?: number
    email?: string
    uuid_firebase?: string
  }

  export type ClienteOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    cpf?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    uuid_firebase?: SortOrder
    _count?: ClienteCountOrderByAggregateInput
    _avg?: ClienteAvgOrderByAggregateInput
    _max?: ClienteMaxOrderByAggregateInput
    _min?: ClienteMinOrderByAggregateInput
    _sum?: ClienteSumOrderByAggregateInput
  }

  export type ClienteScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ClienteScalarWhereWithAggregatesInput>
    OR?: Enumerable<ClienteScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ClienteScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
    cpf?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    uuid_firebase?: StringWithAggregatesFilter | string
  }

  export type VeiculoWhereInput = {
    AND?: Enumerable<VeiculoWhereInput>
    OR?: Enumerable<VeiculoWhereInput>
    NOT?: Enumerable<VeiculoWhereInput>
    id?: IntFilter | number
    placa?: StringFilter | string
    modelo?: StringFilter | string
    id_cliente?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    cliente?: XOR<ClienteRelationFilter, ClienteWhereInput>
  }

  export type VeiculoOrderByWithRelationInput = {
    id?: SortOrder
    placa?: SortOrder
    modelo?: SortOrder
    id_cliente?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    cliente?: ClienteOrderByWithRelationInput
  }

  export type VeiculoWhereUniqueInput = {
    id?: number
  }

  export type VeiculoOrderByWithAggregationInput = {
    id?: SortOrder
    placa?: SortOrder
    modelo?: SortOrder
    id_cliente?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: VeiculoCountOrderByAggregateInput
    _avg?: VeiculoAvgOrderByAggregateInput
    _max?: VeiculoMaxOrderByAggregateInput
    _min?: VeiculoMinOrderByAggregateInput
    _sum?: VeiculoSumOrderByAggregateInput
  }

  export type VeiculoScalarWhereWithAggregatesInput = {
    AND?: Enumerable<VeiculoScalarWhereWithAggregatesInput>
    OR?: Enumerable<VeiculoScalarWhereWithAggregatesInput>
    NOT?: Enumerable<VeiculoScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    placa?: StringWithAggregatesFilter | string
    modelo?: StringWithAggregatesFilter | string
    id_cliente?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type EstacionamentoWhereInput = {
    AND?: Enumerable<EstacionamentoWhereInput>
    OR?: Enumerable<EstacionamentoWhereInput>
    NOT?: Enumerable<EstacionamentoWhereInput>
    id?: IntFilter | number
    preco?: DecimalFilter | Decimal | DecimalJsLike | number | string
    vagas_preferenciais?: IntFilter | number
    vagas_gerais?: IntFilter | number
    razao_social?: StringFilter | string
    cnpj?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    administradores?: EstacionamentoAndAdministradoresListRelationFilter
    Endereco?: EnderecoListRelationFilter
  }

  export type EstacionamentoOrderByWithRelationInput = {
    id?: SortOrder
    preco?: SortOrder
    vagas_preferenciais?: SortOrder
    vagas_gerais?: SortOrder
    razao_social?: SortOrder
    cnpj?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    administradores?: EstacionamentoAndAdministradoresOrderByRelationAggregateInput
    Endereco?: EnderecoOrderByRelationAggregateInput
  }

  export type EstacionamentoWhereUniqueInput = {
    id?: number
    cnpj?: string
  }

  export type EstacionamentoOrderByWithAggregationInput = {
    id?: SortOrder
    preco?: SortOrder
    vagas_preferenciais?: SortOrder
    vagas_gerais?: SortOrder
    razao_social?: SortOrder
    cnpj?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: EstacionamentoCountOrderByAggregateInput
    _avg?: EstacionamentoAvgOrderByAggregateInput
    _max?: EstacionamentoMaxOrderByAggregateInput
    _min?: EstacionamentoMinOrderByAggregateInput
    _sum?: EstacionamentoSumOrderByAggregateInput
  }

  export type EstacionamentoScalarWhereWithAggregatesInput = {
    AND?: Enumerable<EstacionamentoScalarWhereWithAggregatesInput>
    OR?: Enumerable<EstacionamentoScalarWhereWithAggregatesInput>
    NOT?: Enumerable<EstacionamentoScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    preco?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    vagas_preferenciais?: IntWithAggregatesFilter | number
    vagas_gerais?: IntWithAggregatesFilter | number
    razao_social?: StringWithAggregatesFilter | string
    cnpj?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type AdministradorWhereInput = {
    AND?: Enumerable<AdministradorWhereInput>
    OR?: Enumerable<AdministradorWhereInput>
    NOT?: Enumerable<AdministradorWhereInput>
    id?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    nome?: StringFilter | string
    email?: StringFilter | string
    uuid_firebase?: StringFilter | string
    estacionamentos?: EstacionamentoAndAdministradoresListRelationFilter
  }

  export type AdministradorOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    uuid_firebase?: SortOrder
    estacionamentos?: EstacionamentoAndAdministradoresOrderByRelationAggregateInput
  }

  export type AdministradorWhereUniqueInput = {
    id?: number
    email?: string
    uuid_firebase?: string
  }

  export type AdministradorOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    uuid_firebase?: SortOrder
    _count?: AdministradorCountOrderByAggregateInput
    _avg?: AdministradorAvgOrderByAggregateInput
    _max?: AdministradorMaxOrderByAggregateInput
    _min?: AdministradorMinOrderByAggregateInput
    _sum?: AdministradorSumOrderByAggregateInput
  }

  export type AdministradorScalarWhereWithAggregatesInput = {
    AND?: Enumerable<AdministradorScalarWhereWithAggregatesInput>
    OR?: Enumerable<AdministradorScalarWhereWithAggregatesInput>
    NOT?: Enumerable<AdministradorScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    nome?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
    uuid_firebase?: StringWithAggregatesFilter | string
  }

  export type EstacionamentoAndAdministradoresWhereInput = {
    AND?: Enumerable<EstacionamentoAndAdministradoresWhereInput>
    OR?: Enumerable<EstacionamentoAndAdministradoresWhereInput>
    NOT?: Enumerable<EstacionamentoAndAdministradoresWhereInput>
    id_estacionamento?: IntFilter | number
    id_administrador?: IntFilter | number
    estacionamento?: XOR<EstacionamentoRelationFilter, EstacionamentoWhereInput>
    administrador?: XOR<AdministradorRelationFilter, AdministradorWhereInput>
  }

  export type EstacionamentoAndAdministradoresOrderByWithRelationInput = {
    id_estacionamento?: SortOrder
    id_administrador?: SortOrder
    estacionamento?: EstacionamentoOrderByWithRelationInput
    administrador?: AdministradorOrderByWithRelationInput
  }

  export type EstacionamentoAndAdministradoresWhereUniqueInput = {
    id_estacionamento_id_administrador?: EstacionamentoAndAdministradoresId_estacionamentoId_administradorCompoundUniqueInput
  }

  export type EstacionamentoAndAdministradoresOrderByWithAggregationInput = {
    id_estacionamento?: SortOrder
    id_administrador?: SortOrder
    _count?: EstacionamentoAndAdministradoresCountOrderByAggregateInput
    _avg?: EstacionamentoAndAdministradoresAvgOrderByAggregateInput
    _max?: EstacionamentoAndAdministradoresMaxOrderByAggregateInput
    _min?: EstacionamentoAndAdministradoresMinOrderByAggregateInput
    _sum?: EstacionamentoAndAdministradoresSumOrderByAggregateInput
  }

  export type EstacionamentoAndAdministradoresScalarWhereWithAggregatesInput = {
    AND?: Enumerable<EstacionamentoAndAdministradoresScalarWhereWithAggregatesInput>
    OR?: Enumerable<EstacionamentoAndAdministradoresScalarWhereWithAggregatesInput>
    NOT?: Enumerable<EstacionamentoAndAdministradoresScalarWhereWithAggregatesInput>
    id_estacionamento?: IntWithAggregatesFilter | number
    id_administrador?: IntWithAggregatesFilter | number
  }

  export type EnderecoWhereInput = {
    AND?: Enumerable<EnderecoWhereInput>
    OR?: Enumerable<EnderecoWhereInput>
    NOT?: Enumerable<EnderecoWhereInput>
    id?: IntFilter | number
    cep?: IntFilter | number
    bairro?: StringFilter | string
    endereco?: StringFilter | string
    numero?: IntFilter | number
    cidade?: StringFilter | string
    uf?: StringFilter | string
    id_estacionamento?: IntFilter | number
    estacionamento?: XOR<EstacionamentoRelationFilter, EstacionamentoWhereInput>
  }

  export type EnderecoOrderByWithRelationInput = {
    id?: SortOrder
    cep?: SortOrder
    bairro?: SortOrder
    endereco?: SortOrder
    numero?: SortOrder
    cidade?: SortOrder
    uf?: SortOrder
    id_estacionamento?: SortOrder
    estacionamento?: EstacionamentoOrderByWithRelationInput
  }

  export type EnderecoWhereUniqueInput = {
    id?: number
  }

  export type EnderecoOrderByWithAggregationInput = {
    id?: SortOrder
    cep?: SortOrder
    bairro?: SortOrder
    endereco?: SortOrder
    numero?: SortOrder
    cidade?: SortOrder
    uf?: SortOrder
    id_estacionamento?: SortOrder
    _count?: EnderecoCountOrderByAggregateInput
    _avg?: EnderecoAvgOrderByAggregateInput
    _max?: EnderecoMaxOrderByAggregateInput
    _min?: EnderecoMinOrderByAggregateInput
    _sum?: EnderecoSumOrderByAggregateInput
  }

  export type EnderecoScalarWhereWithAggregatesInput = {
    AND?: Enumerable<EnderecoScalarWhereWithAggregatesInput>
    OR?: Enumerable<EnderecoScalarWhereWithAggregatesInput>
    NOT?: Enumerable<EnderecoScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    cep?: IntWithAggregatesFilter | number
    bairro?: StringWithAggregatesFilter | string
    endereco?: StringWithAggregatesFilter | string
    numero?: IntWithAggregatesFilter | number
    cidade?: StringWithAggregatesFilter | string
    uf?: StringWithAggregatesFilter | string
    id_estacionamento?: IntWithAggregatesFilter | number
  }

  export type ClienteCreateInput = {
    name: string
    email: string
    cpf: string
    createdAt?: Date | string
    updatedAt?: Date | string
    uuid_firebase: string
    Veiculo?: VeiculoCreateNestedManyWithoutClienteInput
  }

  export type ClienteUncheckedCreateInput = {
    id?: number
    name: string
    email: string
    cpf: string
    createdAt?: Date | string
    updatedAt?: Date | string
    uuid_firebase: string
    Veiculo?: VeiculoUncheckedCreateNestedManyWithoutClienteInput
  }

  export type ClienteUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    uuid_firebase?: StringFieldUpdateOperationsInput | string
    Veiculo?: VeiculoUpdateManyWithoutClienteNestedInput
  }

  export type ClienteUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    uuid_firebase?: StringFieldUpdateOperationsInput | string
    Veiculo?: VeiculoUncheckedUpdateManyWithoutClienteNestedInput
  }

  export type ClienteCreateManyInput = {
    id?: number
    name: string
    email: string
    cpf: string
    createdAt?: Date | string
    updatedAt?: Date | string
    uuid_firebase: string
  }

  export type ClienteUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    uuid_firebase?: StringFieldUpdateOperationsInput | string
  }

  export type ClienteUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    uuid_firebase?: StringFieldUpdateOperationsInput | string
  }

  export type VeiculoCreateInput = {
    placa: string
    modelo: string
    createdAt?: Date | string
    updatedAt?: Date | string
    cliente: ClienteCreateNestedOneWithoutVeiculoInput
  }

  export type VeiculoUncheckedCreateInput = {
    id?: number
    placa: string
    modelo: string
    id_cliente: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type VeiculoUpdateInput = {
    placa?: StringFieldUpdateOperationsInput | string
    modelo?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cliente?: ClienteUpdateOneRequiredWithoutVeiculoNestedInput
  }

  export type VeiculoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    placa?: StringFieldUpdateOperationsInput | string
    modelo?: StringFieldUpdateOperationsInput | string
    id_cliente?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VeiculoCreateManyInput = {
    id?: number
    placa: string
    modelo: string
    id_cliente: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type VeiculoUpdateManyMutationInput = {
    placa?: StringFieldUpdateOperationsInput | string
    modelo?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VeiculoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    placa?: StringFieldUpdateOperationsInput | string
    modelo?: StringFieldUpdateOperationsInput | string
    id_cliente?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EstacionamentoCreateInput = {
    preco: Decimal | DecimalJsLike | number | string
    vagas_preferenciais: number
    vagas_gerais: number
    razao_social: string
    cnpj: string
    createdAt?: Date | string
    updatedAt?: Date | string
    administradores?: EstacionamentoAndAdministradoresCreateNestedManyWithoutEstacionamentoInput
    Endereco?: EnderecoCreateNestedManyWithoutEstacionamentoInput
  }

  export type EstacionamentoUncheckedCreateInput = {
    id?: number
    preco: Decimal | DecimalJsLike | number | string
    vagas_preferenciais: number
    vagas_gerais: number
    razao_social: string
    cnpj: string
    createdAt?: Date | string
    updatedAt?: Date | string
    administradores?: EstacionamentoAndAdministradoresUncheckedCreateNestedManyWithoutEstacionamentoInput
    Endereco?: EnderecoUncheckedCreateNestedManyWithoutEstacionamentoInput
  }

  export type EstacionamentoUpdateInput = {
    preco?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    vagas_preferenciais?: IntFieldUpdateOperationsInput | number
    vagas_gerais?: IntFieldUpdateOperationsInput | number
    razao_social?: StringFieldUpdateOperationsInput | string
    cnpj?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    administradores?: EstacionamentoAndAdministradoresUpdateManyWithoutEstacionamentoNestedInput
    Endereco?: EnderecoUpdateManyWithoutEstacionamentoNestedInput
  }

  export type EstacionamentoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    preco?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    vagas_preferenciais?: IntFieldUpdateOperationsInput | number
    vagas_gerais?: IntFieldUpdateOperationsInput | number
    razao_social?: StringFieldUpdateOperationsInput | string
    cnpj?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    administradores?: EstacionamentoAndAdministradoresUncheckedUpdateManyWithoutEstacionamentoNestedInput
    Endereco?: EnderecoUncheckedUpdateManyWithoutEstacionamentoNestedInput
  }

  export type EstacionamentoCreateManyInput = {
    id?: number
    preco: Decimal | DecimalJsLike | number | string
    vagas_preferenciais: number
    vagas_gerais: number
    razao_social: string
    cnpj: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EstacionamentoUpdateManyMutationInput = {
    preco?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    vagas_preferenciais?: IntFieldUpdateOperationsInput | number
    vagas_gerais?: IntFieldUpdateOperationsInput | number
    razao_social?: StringFieldUpdateOperationsInput | string
    cnpj?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EstacionamentoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    preco?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    vagas_preferenciais?: IntFieldUpdateOperationsInput | number
    vagas_gerais?: IntFieldUpdateOperationsInput | number
    razao_social?: StringFieldUpdateOperationsInput | string
    cnpj?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AdministradorCreateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    nome: string
    email: string
    uuid_firebase: string
    estacionamentos?: EstacionamentoAndAdministradoresCreateNestedManyWithoutAdministradorInput
  }

  export type AdministradorUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    nome: string
    email: string
    uuid_firebase: string
    estacionamentos?: EstacionamentoAndAdministradoresUncheckedCreateNestedManyWithoutAdministradorInput
  }

  export type AdministradorUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    uuid_firebase?: StringFieldUpdateOperationsInput | string
    estacionamentos?: EstacionamentoAndAdministradoresUpdateManyWithoutAdministradorNestedInput
  }

  export type AdministradorUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    uuid_firebase?: StringFieldUpdateOperationsInput | string
    estacionamentos?: EstacionamentoAndAdministradoresUncheckedUpdateManyWithoutAdministradorNestedInput
  }

  export type AdministradorCreateManyInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    nome: string
    email: string
    uuid_firebase: string
  }

  export type AdministradorUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    uuid_firebase?: StringFieldUpdateOperationsInput | string
  }

  export type AdministradorUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    uuid_firebase?: StringFieldUpdateOperationsInput | string
  }

  export type EstacionamentoAndAdministradoresCreateInput = {
    estacionamento: EstacionamentoCreateNestedOneWithoutAdministradoresInput
    administrador: AdministradorCreateNestedOneWithoutEstacionamentosInput
  }

  export type EstacionamentoAndAdministradoresUncheckedCreateInput = {
    id_estacionamento: number
    id_administrador: number
  }

  export type EstacionamentoAndAdministradoresUpdateInput = {
    estacionamento?: EstacionamentoUpdateOneRequiredWithoutAdministradoresNestedInput
    administrador?: AdministradorUpdateOneRequiredWithoutEstacionamentosNestedInput
  }

  export type EstacionamentoAndAdministradoresUncheckedUpdateInput = {
    id_estacionamento?: IntFieldUpdateOperationsInput | number
    id_administrador?: IntFieldUpdateOperationsInput | number
  }

  export type EstacionamentoAndAdministradoresCreateManyInput = {
    id_estacionamento: number
    id_administrador: number
  }

  export type EstacionamentoAndAdministradoresUpdateManyMutationInput = {

  }

  export type EstacionamentoAndAdministradoresUncheckedUpdateManyInput = {
    id_estacionamento?: IntFieldUpdateOperationsInput | number
    id_administrador?: IntFieldUpdateOperationsInput | number
  }

  export type EnderecoCreateInput = {
    cep: number
    bairro: string
    endereco: string
    numero: number
    cidade: string
    uf: string
    estacionamento: EstacionamentoCreateNestedOneWithoutEnderecoInput
  }

  export type EnderecoUncheckedCreateInput = {
    id?: number
    cep: number
    bairro: string
    endereco: string
    numero: number
    cidade: string
    uf: string
    id_estacionamento: number
  }

  export type EnderecoUpdateInput = {
    cep?: IntFieldUpdateOperationsInput | number
    bairro?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    numero?: IntFieldUpdateOperationsInput | number
    cidade?: StringFieldUpdateOperationsInput | string
    uf?: StringFieldUpdateOperationsInput | string
    estacionamento?: EstacionamentoUpdateOneRequiredWithoutEnderecoNestedInput
  }

  export type EnderecoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    cep?: IntFieldUpdateOperationsInput | number
    bairro?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    numero?: IntFieldUpdateOperationsInput | number
    cidade?: StringFieldUpdateOperationsInput | string
    uf?: StringFieldUpdateOperationsInput | string
    id_estacionamento?: IntFieldUpdateOperationsInput | number
  }

  export type EnderecoCreateManyInput = {
    id?: number
    cep: number
    bairro: string
    endereco: string
    numero: number
    cidade: string
    uf: string
    id_estacionamento: number
  }

  export type EnderecoUpdateManyMutationInput = {
    cep?: IntFieldUpdateOperationsInput | number
    bairro?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    numero?: IntFieldUpdateOperationsInput | number
    cidade?: StringFieldUpdateOperationsInput | string
    uf?: StringFieldUpdateOperationsInput | string
  }

  export type EnderecoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    cep?: IntFieldUpdateOperationsInput | number
    bairro?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    numero?: IntFieldUpdateOperationsInput | number
    cidade?: StringFieldUpdateOperationsInput | string
    uf?: StringFieldUpdateOperationsInput | string
    id_estacionamento?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type VeiculoListRelationFilter = {
    every?: VeiculoWhereInput
    some?: VeiculoWhereInput
    none?: VeiculoWhereInput
  }

  export type VeiculoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ClienteCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    cpf?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    uuid_firebase?: SortOrder
  }

  export type ClienteAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ClienteMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    cpf?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    uuid_firebase?: SortOrder
  }

  export type ClienteMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    cpf?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    uuid_firebase?: SortOrder
  }

  export type ClienteSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type ClienteRelationFilter = {
    is?: ClienteWhereInput
    isNot?: ClienteWhereInput
  }

  export type VeiculoCountOrderByAggregateInput = {
    id?: SortOrder
    placa?: SortOrder
    modelo?: SortOrder
    id_cliente?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type VeiculoAvgOrderByAggregateInput = {
    id?: SortOrder
    id_cliente?: SortOrder
  }

  export type VeiculoMaxOrderByAggregateInput = {
    id?: SortOrder
    placa?: SortOrder
    modelo?: SortOrder
    id_cliente?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type VeiculoMinOrderByAggregateInput = {
    id?: SortOrder
    placa?: SortOrder
    modelo?: SortOrder
    id_cliente?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type VeiculoSumOrderByAggregateInput = {
    id?: SortOrder
    id_cliente?: SortOrder
  }

  export type DecimalFilter = {
    equals?: Decimal | DecimalJsLike | number | string
    in?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string>
    notIn?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string>
    lt?: Decimal | DecimalJsLike | number | string
    lte?: Decimal | DecimalJsLike | number | string
    gt?: Decimal | DecimalJsLike | number | string
    gte?: Decimal | DecimalJsLike | number | string
    not?: NestedDecimalFilter | Decimal | DecimalJsLike | number | string
  }

  export type EstacionamentoAndAdministradoresListRelationFilter = {
    every?: EstacionamentoAndAdministradoresWhereInput
    some?: EstacionamentoAndAdministradoresWhereInput
    none?: EstacionamentoAndAdministradoresWhereInput
  }

  export type EnderecoListRelationFilter = {
    every?: EnderecoWhereInput
    some?: EnderecoWhereInput
    none?: EnderecoWhereInput
  }

  export type EstacionamentoAndAdministradoresOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EnderecoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EstacionamentoCountOrderByAggregateInput = {
    id?: SortOrder
    preco?: SortOrder
    vagas_preferenciais?: SortOrder
    vagas_gerais?: SortOrder
    razao_social?: SortOrder
    cnpj?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EstacionamentoAvgOrderByAggregateInput = {
    id?: SortOrder
    preco?: SortOrder
    vagas_preferenciais?: SortOrder
    vagas_gerais?: SortOrder
  }

  export type EstacionamentoMaxOrderByAggregateInput = {
    id?: SortOrder
    preco?: SortOrder
    vagas_preferenciais?: SortOrder
    vagas_gerais?: SortOrder
    razao_social?: SortOrder
    cnpj?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EstacionamentoMinOrderByAggregateInput = {
    id?: SortOrder
    preco?: SortOrder
    vagas_preferenciais?: SortOrder
    vagas_gerais?: SortOrder
    razao_social?: SortOrder
    cnpj?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EstacionamentoSumOrderByAggregateInput = {
    id?: SortOrder
    preco?: SortOrder
    vagas_preferenciais?: SortOrder
    vagas_gerais?: SortOrder
  }

  export type DecimalWithAggregatesFilter = {
    equals?: Decimal | DecimalJsLike | number | string
    in?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string>
    notIn?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string>
    lt?: Decimal | DecimalJsLike | number | string
    lte?: Decimal | DecimalJsLike | number | string
    gt?: Decimal | DecimalJsLike | number | string
    gte?: Decimal | DecimalJsLike | number | string
    not?: NestedDecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter
    _avg?: NestedDecimalFilter
    _sum?: NestedDecimalFilter
    _min?: NestedDecimalFilter
    _max?: NestedDecimalFilter
  }

  export type AdministradorCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    uuid_firebase?: SortOrder
  }

  export type AdministradorAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type AdministradorMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    uuid_firebase?: SortOrder
  }

  export type AdministradorMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    uuid_firebase?: SortOrder
  }

  export type AdministradorSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EstacionamentoRelationFilter = {
    is?: EstacionamentoWhereInput
    isNot?: EstacionamentoWhereInput
  }

  export type AdministradorRelationFilter = {
    is?: AdministradorWhereInput
    isNot?: AdministradorWhereInput
  }

  export type EstacionamentoAndAdministradoresId_estacionamentoId_administradorCompoundUniqueInput = {
    id_estacionamento: number
    id_administrador: number
  }

  export type EstacionamentoAndAdministradoresCountOrderByAggregateInput = {
    id_estacionamento?: SortOrder
    id_administrador?: SortOrder
  }

  export type EstacionamentoAndAdministradoresAvgOrderByAggregateInput = {
    id_estacionamento?: SortOrder
    id_administrador?: SortOrder
  }

  export type EstacionamentoAndAdministradoresMaxOrderByAggregateInput = {
    id_estacionamento?: SortOrder
    id_administrador?: SortOrder
  }

  export type EstacionamentoAndAdministradoresMinOrderByAggregateInput = {
    id_estacionamento?: SortOrder
    id_administrador?: SortOrder
  }

  export type EstacionamentoAndAdministradoresSumOrderByAggregateInput = {
    id_estacionamento?: SortOrder
    id_administrador?: SortOrder
  }

  export type EnderecoCountOrderByAggregateInput = {
    id?: SortOrder
    cep?: SortOrder
    bairro?: SortOrder
    endereco?: SortOrder
    numero?: SortOrder
    cidade?: SortOrder
    uf?: SortOrder
    id_estacionamento?: SortOrder
  }

  export type EnderecoAvgOrderByAggregateInput = {
    id?: SortOrder
    cep?: SortOrder
    numero?: SortOrder
    id_estacionamento?: SortOrder
  }

  export type EnderecoMaxOrderByAggregateInput = {
    id?: SortOrder
    cep?: SortOrder
    bairro?: SortOrder
    endereco?: SortOrder
    numero?: SortOrder
    cidade?: SortOrder
    uf?: SortOrder
    id_estacionamento?: SortOrder
  }

  export type EnderecoMinOrderByAggregateInput = {
    id?: SortOrder
    cep?: SortOrder
    bairro?: SortOrder
    endereco?: SortOrder
    numero?: SortOrder
    cidade?: SortOrder
    uf?: SortOrder
    id_estacionamento?: SortOrder
  }

  export type EnderecoSumOrderByAggregateInput = {
    id?: SortOrder
    cep?: SortOrder
    numero?: SortOrder
    id_estacionamento?: SortOrder
  }

  export type VeiculoCreateNestedManyWithoutClienteInput = {
    create?: XOR<Enumerable<VeiculoCreateWithoutClienteInput>, Enumerable<VeiculoUncheckedCreateWithoutClienteInput>>
    connectOrCreate?: Enumerable<VeiculoCreateOrConnectWithoutClienteInput>
    createMany?: VeiculoCreateManyClienteInputEnvelope
    connect?: Enumerable<VeiculoWhereUniqueInput>
  }

  export type VeiculoUncheckedCreateNestedManyWithoutClienteInput = {
    create?: XOR<Enumerable<VeiculoCreateWithoutClienteInput>, Enumerable<VeiculoUncheckedCreateWithoutClienteInput>>
    connectOrCreate?: Enumerable<VeiculoCreateOrConnectWithoutClienteInput>
    createMany?: VeiculoCreateManyClienteInputEnvelope
    connect?: Enumerable<VeiculoWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type VeiculoUpdateManyWithoutClienteNestedInput = {
    create?: XOR<Enumerable<VeiculoCreateWithoutClienteInput>, Enumerable<VeiculoUncheckedCreateWithoutClienteInput>>
    connectOrCreate?: Enumerable<VeiculoCreateOrConnectWithoutClienteInput>
    upsert?: Enumerable<VeiculoUpsertWithWhereUniqueWithoutClienteInput>
    createMany?: VeiculoCreateManyClienteInputEnvelope
    set?: Enumerable<VeiculoWhereUniqueInput>
    disconnect?: Enumerable<VeiculoWhereUniqueInput>
    delete?: Enumerable<VeiculoWhereUniqueInput>
    connect?: Enumerable<VeiculoWhereUniqueInput>
    update?: Enumerable<VeiculoUpdateWithWhereUniqueWithoutClienteInput>
    updateMany?: Enumerable<VeiculoUpdateManyWithWhereWithoutClienteInput>
    deleteMany?: Enumerable<VeiculoScalarWhereInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type VeiculoUncheckedUpdateManyWithoutClienteNestedInput = {
    create?: XOR<Enumerable<VeiculoCreateWithoutClienteInput>, Enumerable<VeiculoUncheckedCreateWithoutClienteInput>>
    connectOrCreate?: Enumerable<VeiculoCreateOrConnectWithoutClienteInput>
    upsert?: Enumerable<VeiculoUpsertWithWhereUniqueWithoutClienteInput>
    createMany?: VeiculoCreateManyClienteInputEnvelope
    set?: Enumerable<VeiculoWhereUniqueInput>
    disconnect?: Enumerable<VeiculoWhereUniqueInput>
    delete?: Enumerable<VeiculoWhereUniqueInput>
    connect?: Enumerable<VeiculoWhereUniqueInput>
    update?: Enumerable<VeiculoUpdateWithWhereUniqueWithoutClienteInput>
    updateMany?: Enumerable<VeiculoUpdateManyWithWhereWithoutClienteInput>
    deleteMany?: Enumerable<VeiculoScalarWhereInput>
  }

  export type ClienteCreateNestedOneWithoutVeiculoInput = {
    create?: XOR<ClienteCreateWithoutVeiculoInput, ClienteUncheckedCreateWithoutVeiculoInput>
    connectOrCreate?: ClienteCreateOrConnectWithoutVeiculoInput
    connect?: ClienteWhereUniqueInput
  }

  export type ClienteUpdateOneRequiredWithoutVeiculoNestedInput = {
    create?: XOR<ClienteCreateWithoutVeiculoInput, ClienteUncheckedCreateWithoutVeiculoInput>
    connectOrCreate?: ClienteCreateOrConnectWithoutVeiculoInput
    upsert?: ClienteUpsertWithoutVeiculoInput
    connect?: ClienteWhereUniqueInput
    update?: XOR<ClienteUpdateWithoutVeiculoInput, ClienteUncheckedUpdateWithoutVeiculoInput>
  }

  export type EstacionamentoAndAdministradoresCreateNestedManyWithoutEstacionamentoInput = {
    create?: XOR<Enumerable<EstacionamentoAndAdministradoresCreateWithoutEstacionamentoInput>, Enumerable<EstacionamentoAndAdministradoresUncheckedCreateWithoutEstacionamentoInput>>
    connectOrCreate?: Enumerable<EstacionamentoAndAdministradoresCreateOrConnectWithoutEstacionamentoInput>
    createMany?: EstacionamentoAndAdministradoresCreateManyEstacionamentoInputEnvelope
    connect?: Enumerable<EstacionamentoAndAdministradoresWhereUniqueInput>
  }

  export type EnderecoCreateNestedManyWithoutEstacionamentoInput = {
    create?: XOR<Enumerable<EnderecoCreateWithoutEstacionamentoInput>, Enumerable<EnderecoUncheckedCreateWithoutEstacionamentoInput>>
    connectOrCreate?: Enumerable<EnderecoCreateOrConnectWithoutEstacionamentoInput>
    createMany?: EnderecoCreateManyEstacionamentoInputEnvelope
    connect?: Enumerable<EnderecoWhereUniqueInput>
  }

  export type EstacionamentoAndAdministradoresUncheckedCreateNestedManyWithoutEstacionamentoInput = {
    create?: XOR<Enumerable<EstacionamentoAndAdministradoresCreateWithoutEstacionamentoInput>, Enumerable<EstacionamentoAndAdministradoresUncheckedCreateWithoutEstacionamentoInput>>
    connectOrCreate?: Enumerable<EstacionamentoAndAdministradoresCreateOrConnectWithoutEstacionamentoInput>
    createMany?: EstacionamentoAndAdministradoresCreateManyEstacionamentoInputEnvelope
    connect?: Enumerable<EstacionamentoAndAdministradoresWhereUniqueInput>
  }

  export type EnderecoUncheckedCreateNestedManyWithoutEstacionamentoInput = {
    create?: XOR<Enumerable<EnderecoCreateWithoutEstacionamentoInput>, Enumerable<EnderecoUncheckedCreateWithoutEstacionamentoInput>>
    connectOrCreate?: Enumerable<EnderecoCreateOrConnectWithoutEstacionamentoInput>
    createMany?: EnderecoCreateManyEstacionamentoInputEnvelope
    connect?: Enumerable<EnderecoWhereUniqueInput>
  }

  export type DecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type EstacionamentoAndAdministradoresUpdateManyWithoutEstacionamentoNestedInput = {
    create?: XOR<Enumerable<EstacionamentoAndAdministradoresCreateWithoutEstacionamentoInput>, Enumerable<EstacionamentoAndAdministradoresUncheckedCreateWithoutEstacionamentoInput>>
    connectOrCreate?: Enumerable<EstacionamentoAndAdministradoresCreateOrConnectWithoutEstacionamentoInput>
    upsert?: Enumerable<EstacionamentoAndAdministradoresUpsertWithWhereUniqueWithoutEstacionamentoInput>
    createMany?: EstacionamentoAndAdministradoresCreateManyEstacionamentoInputEnvelope
    set?: Enumerable<EstacionamentoAndAdministradoresWhereUniqueInput>
    disconnect?: Enumerable<EstacionamentoAndAdministradoresWhereUniqueInput>
    delete?: Enumerable<EstacionamentoAndAdministradoresWhereUniqueInput>
    connect?: Enumerable<EstacionamentoAndAdministradoresWhereUniqueInput>
    update?: Enumerable<EstacionamentoAndAdministradoresUpdateWithWhereUniqueWithoutEstacionamentoInput>
    updateMany?: Enumerable<EstacionamentoAndAdministradoresUpdateManyWithWhereWithoutEstacionamentoInput>
    deleteMany?: Enumerable<EstacionamentoAndAdministradoresScalarWhereInput>
  }

  export type EnderecoUpdateManyWithoutEstacionamentoNestedInput = {
    create?: XOR<Enumerable<EnderecoCreateWithoutEstacionamentoInput>, Enumerable<EnderecoUncheckedCreateWithoutEstacionamentoInput>>
    connectOrCreate?: Enumerable<EnderecoCreateOrConnectWithoutEstacionamentoInput>
    upsert?: Enumerable<EnderecoUpsertWithWhereUniqueWithoutEstacionamentoInput>
    createMany?: EnderecoCreateManyEstacionamentoInputEnvelope
    set?: Enumerable<EnderecoWhereUniqueInput>
    disconnect?: Enumerable<EnderecoWhereUniqueInput>
    delete?: Enumerable<EnderecoWhereUniqueInput>
    connect?: Enumerable<EnderecoWhereUniqueInput>
    update?: Enumerable<EnderecoUpdateWithWhereUniqueWithoutEstacionamentoInput>
    updateMany?: Enumerable<EnderecoUpdateManyWithWhereWithoutEstacionamentoInput>
    deleteMany?: Enumerable<EnderecoScalarWhereInput>
  }

  export type EstacionamentoAndAdministradoresUncheckedUpdateManyWithoutEstacionamentoNestedInput = {
    create?: XOR<Enumerable<EstacionamentoAndAdministradoresCreateWithoutEstacionamentoInput>, Enumerable<EstacionamentoAndAdministradoresUncheckedCreateWithoutEstacionamentoInput>>
    connectOrCreate?: Enumerable<EstacionamentoAndAdministradoresCreateOrConnectWithoutEstacionamentoInput>
    upsert?: Enumerable<EstacionamentoAndAdministradoresUpsertWithWhereUniqueWithoutEstacionamentoInput>
    createMany?: EstacionamentoAndAdministradoresCreateManyEstacionamentoInputEnvelope
    set?: Enumerable<EstacionamentoAndAdministradoresWhereUniqueInput>
    disconnect?: Enumerable<EstacionamentoAndAdministradoresWhereUniqueInput>
    delete?: Enumerable<EstacionamentoAndAdministradoresWhereUniqueInput>
    connect?: Enumerable<EstacionamentoAndAdministradoresWhereUniqueInput>
    update?: Enumerable<EstacionamentoAndAdministradoresUpdateWithWhereUniqueWithoutEstacionamentoInput>
    updateMany?: Enumerable<EstacionamentoAndAdministradoresUpdateManyWithWhereWithoutEstacionamentoInput>
    deleteMany?: Enumerable<EstacionamentoAndAdministradoresScalarWhereInput>
  }

  export type EnderecoUncheckedUpdateManyWithoutEstacionamentoNestedInput = {
    create?: XOR<Enumerable<EnderecoCreateWithoutEstacionamentoInput>, Enumerable<EnderecoUncheckedCreateWithoutEstacionamentoInput>>
    connectOrCreate?: Enumerable<EnderecoCreateOrConnectWithoutEstacionamentoInput>
    upsert?: Enumerable<EnderecoUpsertWithWhereUniqueWithoutEstacionamentoInput>
    createMany?: EnderecoCreateManyEstacionamentoInputEnvelope
    set?: Enumerable<EnderecoWhereUniqueInput>
    disconnect?: Enumerable<EnderecoWhereUniqueInput>
    delete?: Enumerable<EnderecoWhereUniqueInput>
    connect?: Enumerable<EnderecoWhereUniqueInput>
    update?: Enumerable<EnderecoUpdateWithWhereUniqueWithoutEstacionamentoInput>
    updateMany?: Enumerable<EnderecoUpdateManyWithWhereWithoutEstacionamentoInput>
    deleteMany?: Enumerable<EnderecoScalarWhereInput>
  }

  export type EstacionamentoAndAdministradoresCreateNestedManyWithoutAdministradorInput = {
    create?: XOR<Enumerable<EstacionamentoAndAdministradoresCreateWithoutAdministradorInput>, Enumerable<EstacionamentoAndAdministradoresUncheckedCreateWithoutAdministradorInput>>
    connectOrCreate?: Enumerable<EstacionamentoAndAdministradoresCreateOrConnectWithoutAdministradorInput>
    createMany?: EstacionamentoAndAdministradoresCreateManyAdministradorInputEnvelope
    connect?: Enumerable<EstacionamentoAndAdministradoresWhereUniqueInput>
  }

  export type EstacionamentoAndAdministradoresUncheckedCreateNestedManyWithoutAdministradorInput = {
    create?: XOR<Enumerable<EstacionamentoAndAdministradoresCreateWithoutAdministradorInput>, Enumerable<EstacionamentoAndAdministradoresUncheckedCreateWithoutAdministradorInput>>
    connectOrCreate?: Enumerable<EstacionamentoAndAdministradoresCreateOrConnectWithoutAdministradorInput>
    createMany?: EstacionamentoAndAdministradoresCreateManyAdministradorInputEnvelope
    connect?: Enumerable<EstacionamentoAndAdministradoresWhereUniqueInput>
  }

  export type EstacionamentoAndAdministradoresUpdateManyWithoutAdministradorNestedInput = {
    create?: XOR<Enumerable<EstacionamentoAndAdministradoresCreateWithoutAdministradorInput>, Enumerable<EstacionamentoAndAdministradoresUncheckedCreateWithoutAdministradorInput>>
    connectOrCreate?: Enumerable<EstacionamentoAndAdministradoresCreateOrConnectWithoutAdministradorInput>
    upsert?: Enumerable<EstacionamentoAndAdministradoresUpsertWithWhereUniqueWithoutAdministradorInput>
    createMany?: EstacionamentoAndAdministradoresCreateManyAdministradorInputEnvelope
    set?: Enumerable<EstacionamentoAndAdministradoresWhereUniqueInput>
    disconnect?: Enumerable<EstacionamentoAndAdministradoresWhereUniqueInput>
    delete?: Enumerable<EstacionamentoAndAdministradoresWhereUniqueInput>
    connect?: Enumerable<EstacionamentoAndAdministradoresWhereUniqueInput>
    update?: Enumerable<EstacionamentoAndAdministradoresUpdateWithWhereUniqueWithoutAdministradorInput>
    updateMany?: Enumerable<EstacionamentoAndAdministradoresUpdateManyWithWhereWithoutAdministradorInput>
    deleteMany?: Enumerable<EstacionamentoAndAdministradoresScalarWhereInput>
  }

  export type EstacionamentoAndAdministradoresUncheckedUpdateManyWithoutAdministradorNestedInput = {
    create?: XOR<Enumerable<EstacionamentoAndAdministradoresCreateWithoutAdministradorInput>, Enumerable<EstacionamentoAndAdministradoresUncheckedCreateWithoutAdministradorInput>>
    connectOrCreate?: Enumerable<EstacionamentoAndAdministradoresCreateOrConnectWithoutAdministradorInput>
    upsert?: Enumerable<EstacionamentoAndAdministradoresUpsertWithWhereUniqueWithoutAdministradorInput>
    createMany?: EstacionamentoAndAdministradoresCreateManyAdministradorInputEnvelope
    set?: Enumerable<EstacionamentoAndAdministradoresWhereUniqueInput>
    disconnect?: Enumerable<EstacionamentoAndAdministradoresWhereUniqueInput>
    delete?: Enumerable<EstacionamentoAndAdministradoresWhereUniqueInput>
    connect?: Enumerable<EstacionamentoAndAdministradoresWhereUniqueInput>
    update?: Enumerable<EstacionamentoAndAdministradoresUpdateWithWhereUniqueWithoutAdministradorInput>
    updateMany?: Enumerable<EstacionamentoAndAdministradoresUpdateManyWithWhereWithoutAdministradorInput>
    deleteMany?: Enumerable<EstacionamentoAndAdministradoresScalarWhereInput>
  }

  export type EstacionamentoCreateNestedOneWithoutAdministradoresInput = {
    create?: XOR<EstacionamentoCreateWithoutAdministradoresInput, EstacionamentoUncheckedCreateWithoutAdministradoresInput>
    connectOrCreate?: EstacionamentoCreateOrConnectWithoutAdministradoresInput
    connect?: EstacionamentoWhereUniqueInput
  }

  export type AdministradorCreateNestedOneWithoutEstacionamentosInput = {
    create?: XOR<AdministradorCreateWithoutEstacionamentosInput, AdministradorUncheckedCreateWithoutEstacionamentosInput>
    connectOrCreate?: AdministradorCreateOrConnectWithoutEstacionamentosInput
    connect?: AdministradorWhereUniqueInput
  }

  export type EstacionamentoUpdateOneRequiredWithoutAdministradoresNestedInput = {
    create?: XOR<EstacionamentoCreateWithoutAdministradoresInput, EstacionamentoUncheckedCreateWithoutAdministradoresInput>
    connectOrCreate?: EstacionamentoCreateOrConnectWithoutAdministradoresInput
    upsert?: EstacionamentoUpsertWithoutAdministradoresInput
    connect?: EstacionamentoWhereUniqueInput
    update?: XOR<EstacionamentoUpdateWithoutAdministradoresInput, EstacionamentoUncheckedUpdateWithoutAdministradoresInput>
  }

  export type AdministradorUpdateOneRequiredWithoutEstacionamentosNestedInput = {
    create?: XOR<AdministradorCreateWithoutEstacionamentosInput, AdministradorUncheckedCreateWithoutEstacionamentosInput>
    connectOrCreate?: AdministradorCreateOrConnectWithoutEstacionamentosInput
    upsert?: AdministradorUpsertWithoutEstacionamentosInput
    connect?: AdministradorWhereUniqueInput
    update?: XOR<AdministradorUpdateWithoutEstacionamentosInput, AdministradorUncheckedUpdateWithoutEstacionamentosInput>
  }

  export type EstacionamentoCreateNestedOneWithoutEnderecoInput = {
    create?: XOR<EstacionamentoCreateWithoutEnderecoInput, EstacionamentoUncheckedCreateWithoutEnderecoInput>
    connectOrCreate?: EstacionamentoCreateOrConnectWithoutEnderecoInput
    connect?: EstacionamentoWhereUniqueInput
  }

  export type EstacionamentoUpdateOneRequiredWithoutEnderecoNestedInput = {
    create?: XOR<EstacionamentoCreateWithoutEnderecoInput, EstacionamentoUncheckedCreateWithoutEnderecoInput>
    connectOrCreate?: EstacionamentoCreateOrConnectWithoutEnderecoInput
    upsert?: EstacionamentoUpsertWithoutEnderecoInput
    connect?: EstacionamentoWhereUniqueInput
    update?: XOR<EstacionamentoUpdateWithoutEnderecoInput, EstacionamentoUncheckedUpdateWithoutEnderecoInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedDecimalFilter = {
    equals?: Decimal | DecimalJsLike | number | string
    in?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string>
    notIn?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string>
    lt?: Decimal | DecimalJsLike | number | string
    lte?: Decimal | DecimalJsLike | number | string
    gt?: Decimal | DecimalJsLike | number | string
    gte?: Decimal | DecimalJsLike | number | string
    not?: NestedDecimalFilter | Decimal | DecimalJsLike | number | string
  }

  export type NestedDecimalWithAggregatesFilter = {
    equals?: Decimal | DecimalJsLike | number | string
    in?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string>
    notIn?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string>
    lt?: Decimal | DecimalJsLike | number | string
    lte?: Decimal | DecimalJsLike | number | string
    gt?: Decimal | DecimalJsLike | number | string
    gte?: Decimal | DecimalJsLike | number | string
    not?: NestedDecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter
    _avg?: NestedDecimalFilter
    _sum?: NestedDecimalFilter
    _min?: NestedDecimalFilter
    _max?: NestedDecimalFilter
  }

  export type VeiculoCreateWithoutClienteInput = {
    placa: string
    modelo: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type VeiculoUncheckedCreateWithoutClienteInput = {
    id?: number
    placa: string
    modelo: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type VeiculoCreateOrConnectWithoutClienteInput = {
    where: VeiculoWhereUniqueInput
    create: XOR<VeiculoCreateWithoutClienteInput, VeiculoUncheckedCreateWithoutClienteInput>
  }

  export type VeiculoCreateManyClienteInputEnvelope = {
    data: Enumerable<VeiculoCreateManyClienteInput>
    skipDuplicates?: boolean
  }

  export type VeiculoUpsertWithWhereUniqueWithoutClienteInput = {
    where: VeiculoWhereUniqueInput
    update: XOR<VeiculoUpdateWithoutClienteInput, VeiculoUncheckedUpdateWithoutClienteInput>
    create: XOR<VeiculoCreateWithoutClienteInput, VeiculoUncheckedCreateWithoutClienteInput>
  }

  export type VeiculoUpdateWithWhereUniqueWithoutClienteInput = {
    where: VeiculoWhereUniqueInput
    data: XOR<VeiculoUpdateWithoutClienteInput, VeiculoUncheckedUpdateWithoutClienteInput>
  }

  export type VeiculoUpdateManyWithWhereWithoutClienteInput = {
    where: VeiculoScalarWhereInput
    data: XOR<VeiculoUpdateManyMutationInput, VeiculoUncheckedUpdateManyWithoutVeiculoInput>
  }

  export type VeiculoScalarWhereInput = {
    AND?: Enumerable<VeiculoScalarWhereInput>
    OR?: Enumerable<VeiculoScalarWhereInput>
    NOT?: Enumerable<VeiculoScalarWhereInput>
    id?: IntFilter | number
    placa?: StringFilter | string
    modelo?: StringFilter | string
    id_cliente?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type ClienteCreateWithoutVeiculoInput = {
    name: string
    email: string
    cpf: string
    createdAt?: Date | string
    updatedAt?: Date | string
    uuid_firebase: string
  }

  export type ClienteUncheckedCreateWithoutVeiculoInput = {
    id?: number
    name: string
    email: string
    cpf: string
    createdAt?: Date | string
    updatedAt?: Date | string
    uuid_firebase: string
  }

  export type ClienteCreateOrConnectWithoutVeiculoInput = {
    where: ClienteWhereUniqueInput
    create: XOR<ClienteCreateWithoutVeiculoInput, ClienteUncheckedCreateWithoutVeiculoInput>
  }

  export type ClienteUpsertWithoutVeiculoInput = {
    update: XOR<ClienteUpdateWithoutVeiculoInput, ClienteUncheckedUpdateWithoutVeiculoInput>
    create: XOR<ClienteCreateWithoutVeiculoInput, ClienteUncheckedCreateWithoutVeiculoInput>
  }

  export type ClienteUpdateWithoutVeiculoInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    uuid_firebase?: StringFieldUpdateOperationsInput | string
  }

  export type ClienteUncheckedUpdateWithoutVeiculoInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    uuid_firebase?: StringFieldUpdateOperationsInput | string
  }

  export type EstacionamentoAndAdministradoresCreateWithoutEstacionamentoInput = {
    administrador: AdministradorCreateNestedOneWithoutEstacionamentosInput
  }

  export type EstacionamentoAndAdministradoresUncheckedCreateWithoutEstacionamentoInput = {
    id_administrador: number
  }

  export type EstacionamentoAndAdministradoresCreateOrConnectWithoutEstacionamentoInput = {
    where: EstacionamentoAndAdministradoresWhereUniqueInput
    create: XOR<EstacionamentoAndAdministradoresCreateWithoutEstacionamentoInput, EstacionamentoAndAdministradoresUncheckedCreateWithoutEstacionamentoInput>
  }

  export type EstacionamentoAndAdministradoresCreateManyEstacionamentoInputEnvelope = {
    data: Enumerable<EstacionamentoAndAdministradoresCreateManyEstacionamentoInput>
    skipDuplicates?: boolean
  }

  export type EnderecoCreateWithoutEstacionamentoInput = {
    cep: number
    bairro: string
    endereco: string
    numero: number
    cidade: string
    uf: string
  }

  export type EnderecoUncheckedCreateWithoutEstacionamentoInput = {
    id?: number
    cep: number
    bairro: string
    endereco: string
    numero: number
    cidade: string
    uf: string
  }

  export type EnderecoCreateOrConnectWithoutEstacionamentoInput = {
    where: EnderecoWhereUniqueInput
    create: XOR<EnderecoCreateWithoutEstacionamentoInput, EnderecoUncheckedCreateWithoutEstacionamentoInput>
  }

  export type EnderecoCreateManyEstacionamentoInputEnvelope = {
    data: Enumerable<EnderecoCreateManyEstacionamentoInput>
    skipDuplicates?: boolean
  }

  export type EstacionamentoAndAdministradoresUpsertWithWhereUniqueWithoutEstacionamentoInput = {
    where: EstacionamentoAndAdministradoresWhereUniqueInput
    update: XOR<EstacionamentoAndAdministradoresUpdateWithoutEstacionamentoInput, EstacionamentoAndAdministradoresUncheckedUpdateWithoutEstacionamentoInput>
    create: XOR<EstacionamentoAndAdministradoresCreateWithoutEstacionamentoInput, EstacionamentoAndAdministradoresUncheckedCreateWithoutEstacionamentoInput>
  }

  export type EstacionamentoAndAdministradoresUpdateWithWhereUniqueWithoutEstacionamentoInput = {
    where: EstacionamentoAndAdministradoresWhereUniqueInput
    data: XOR<EstacionamentoAndAdministradoresUpdateWithoutEstacionamentoInput, EstacionamentoAndAdministradoresUncheckedUpdateWithoutEstacionamentoInput>
  }

  export type EstacionamentoAndAdministradoresUpdateManyWithWhereWithoutEstacionamentoInput = {
    where: EstacionamentoAndAdministradoresScalarWhereInput
    data: XOR<EstacionamentoAndAdministradoresUpdateManyMutationInput, EstacionamentoAndAdministradoresUncheckedUpdateManyWithoutAdministradoresInput>
  }

  export type EstacionamentoAndAdministradoresScalarWhereInput = {
    AND?: Enumerable<EstacionamentoAndAdministradoresScalarWhereInput>
    OR?: Enumerable<EstacionamentoAndAdministradoresScalarWhereInput>
    NOT?: Enumerable<EstacionamentoAndAdministradoresScalarWhereInput>
    id_estacionamento?: IntFilter | number
    id_administrador?: IntFilter | number
  }

  export type EnderecoUpsertWithWhereUniqueWithoutEstacionamentoInput = {
    where: EnderecoWhereUniqueInput
    update: XOR<EnderecoUpdateWithoutEstacionamentoInput, EnderecoUncheckedUpdateWithoutEstacionamentoInput>
    create: XOR<EnderecoCreateWithoutEstacionamentoInput, EnderecoUncheckedCreateWithoutEstacionamentoInput>
  }

  export type EnderecoUpdateWithWhereUniqueWithoutEstacionamentoInput = {
    where: EnderecoWhereUniqueInput
    data: XOR<EnderecoUpdateWithoutEstacionamentoInput, EnderecoUncheckedUpdateWithoutEstacionamentoInput>
  }

  export type EnderecoUpdateManyWithWhereWithoutEstacionamentoInput = {
    where: EnderecoScalarWhereInput
    data: XOR<EnderecoUpdateManyMutationInput, EnderecoUncheckedUpdateManyWithoutEnderecoInput>
  }

  export type EnderecoScalarWhereInput = {
    AND?: Enumerable<EnderecoScalarWhereInput>
    OR?: Enumerable<EnderecoScalarWhereInput>
    NOT?: Enumerable<EnderecoScalarWhereInput>
    id?: IntFilter | number
    cep?: IntFilter | number
    bairro?: StringFilter | string
    endereco?: StringFilter | string
    numero?: IntFilter | number
    cidade?: StringFilter | string
    uf?: StringFilter | string
    id_estacionamento?: IntFilter | number
  }

  export type EstacionamentoAndAdministradoresCreateWithoutAdministradorInput = {
    estacionamento: EstacionamentoCreateNestedOneWithoutAdministradoresInput
  }

  export type EstacionamentoAndAdministradoresUncheckedCreateWithoutAdministradorInput = {
    id_estacionamento: number
  }

  export type EstacionamentoAndAdministradoresCreateOrConnectWithoutAdministradorInput = {
    where: EstacionamentoAndAdministradoresWhereUniqueInput
    create: XOR<EstacionamentoAndAdministradoresCreateWithoutAdministradorInput, EstacionamentoAndAdministradoresUncheckedCreateWithoutAdministradorInput>
  }

  export type EstacionamentoAndAdministradoresCreateManyAdministradorInputEnvelope = {
    data: Enumerable<EstacionamentoAndAdministradoresCreateManyAdministradorInput>
    skipDuplicates?: boolean
  }

  export type EstacionamentoAndAdministradoresUpsertWithWhereUniqueWithoutAdministradorInput = {
    where: EstacionamentoAndAdministradoresWhereUniqueInput
    update: XOR<EstacionamentoAndAdministradoresUpdateWithoutAdministradorInput, EstacionamentoAndAdministradoresUncheckedUpdateWithoutAdministradorInput>
    create: XOR<EstacionamentoAndAdministradoresCreateWithoutAdministradorInput, EstacionamentoAndAdministradoresUncheckedCreateWithoutAdministradorInput>
  }

  export type EstacionamentoAndAdministradoresUpdateWithWhereUniqueWithoutAdministradorInput = {
    where: EstacionamentoAndAdministradoresWhereUniqueInput
    data: XOR<EstacionamentoAndAdministradoresUpdateWithoutAdministradorInput, EstacionamentoAndAdministradoresUncheckedUpdateWithoutAdministradorInput>
  }

  export type EstacionamentoAndAdministradoresUpdateManyWithWhereWithoutAdministradorInput = {
    where: EstacionamentoAndAdministradoresScalarWhereInput
    data: XOR<EstacionamentoAndAdministradoresUpdateManyMutationInput, EstacionamentoAndAdministradoresUncheckedUpdateManyWithoutEstacionamentosInput>
  }

  export type EstacionamentoCreateWithoutAdministradoresInput = {
    preco: Decimal | DecimalJsLike | number | string
    vagas_preferenciais: number
    vagas_gerais: number
    razao_social: string
    cnpj: string
    createdAt?: Date | string
    updatedAt?: Date | string
    Endereco?: EnderecoCreateNestedManyWithoutEstacionamentoInput
  }

  export type EstacionamentoUncheckedCreateWithoutAdministradoresInput = {
    id?: number
    preco: Decimal | DecimalJsLike | number | string
    vagas_preferenciais: number
    vagas_gerais: number
    razao_social: string
    cnpj: string
    createdAt?: Date | string
    updatedAt?: Date | string
    Endereco?: EnderecoUncheckedCreateNestedManyWithoutEstacionamentoInput
  }

  export type EstacionamentoCreateOrConnectWithoutAdministradoresInput = {
    where: EstacionamentoWhereUniqueInput
    create: XOR<EstacionamentoCreateWithoutAdministradoresInput, EstacionamentoUncheckedCreateWithoutAdministradoresInput>
  }

  export type AdministradorCreateWithoutEstacionamentosInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    nome: string
    email: string
    uuid_firebase: string
  }

  export type AdministradorUncheckedCreateWithoutEstacionamentosInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    nome: string
    email: string
    uuid_firebase: string
  }

  export type AdministradorCreateOrConnectWithoutEstacionamentosInput = {
    where: AdministradorWhereUniqueInput
    create: XOR<AdministradorCreateWithoutEstacionamentosInput, AdministradorUncheckedCreateWithoutEstacionamentosInput>
  }

  export type EstacionamentoUpsertWithoutAdministradoresInput = {
    update: XOR<EstacionamentoUpdateWithoutAdministradoresInput, EstacionamentoUncheckedUpdateWithoutAdministradoresInput>
    create: XOR<EstacionamentoCreateWithoutAdministradoresInput, EstacionamentoUncheckedCreateWithoutAdministradoresInput>
  }

  export type EstacionamentoUpdateWithoutAdministradoresInput = {
    preco?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    vagas_preferenciais?: IntFieldUpdateOperationsInput | number
    vagas_gerais?: IntFieldUpdateOperationsInput | number
    razao_social?: StringFieldUpdateOperationsInput | string
    cnpj?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Endereco?: EnderecoUpdateManyWithoutEstacionamentoNestedInput
  }

  export type EstacionamentoUncheckedUpdateWithoutAdministradoresInput = {
    id?: IntFieldUpdateOperationsInput | number
    preco?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    vagas_preferenciais?: IntFieldUpdateOperationsInput | number
    vagas_gerais?: IntFieldUpdateOperationsInput | number
    razao_social?: StringFieldUpdateOperationsInput | string
    cnpj?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Endereco?: EnderecoUncheckedUpdateManyWithoutEstacionamentoNestedInput
  }

  export type AdministradorUpsertWithoutEstacionamentosInput = {
    update: XOR<AdministradorUpdateWithoutEstacionamentosInput, AdministradorUncheckedUpdateWithoutEstacionamentosInput>
    create: XOR<AdministradorCreateWithoutEstacionamentosInput, AdministradorUncheckedCreateWithoutEstacionamentosInput>
  }

  export type AdministradorUpdateWithoutEstacionamentosInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    uuid_firebase?: StringFieldUpdateOperationsInput | string
  }

  export type AdministradorUncheckedUpdateWithoutEstacionamentosInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    uuid_firebase?: StringFieldUpdateOperationsInput | string
  }

  export type EstacionamentoCreateWithoutEnderecoInput = {
    preco: Decimal | DecimalJsLike | number | string
    vagas_preferenciais: number
    vagas_gerais: number
    razao_social: string
    cnpj: string
    createdAt?: Date | string
    updatedAt?: Date | string
    administradores?: EstacionamentoAndAdministradoresCreateNestedManyWithoutEstacionamentoInput
  }

  export type EstacionamentoUncheckedCreateWithoutEnderecoInput = {
    id?: number
    preco: Decimal | DecimalJsLike | number | string
    vagas_preferenciais: number
    vagas_gerais: number
    razao_social: string
    cnpj: string
    createdAt?: Date | string
    updatedAt?: Date | string
    administradores?: EstacionamentoAndAdministradoresUncheckedCreateNestedManyWithoutEstacionamentoInput
  }

  export type EstacionamentoCreateOrConnectWithoutEnderecoInput = {
    where: EstacionamentoWhereUniqueInput
    create: XOR<EstacionamentoCreateWithoutEnderecoInput, EstacionamentoUncheckedCreateWithoutEnderecoInput>
  }

  export type EstacionamentoUpsertWithoutEnderecoInput = {
    update: XOR<EstacionamentoUpdateWithoutEnderecoInput, EstacionamentoUncheckedUpdateWithoutEnderecoInput>
    create: XOR<EstacionamentoCreateWithoutEnderecoInput, EstacionamentoUncheckedCreateWithoutEnderecoInput>
  }

  export type EstacionamentoUpdateWithoutEnderecoInput = {
    preco?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    vagas_preferenciais?: IntFieldUpdateOperationsInput | number
    vagas_gerais?: IntFieldUpdateOperationsInput | number
    razao_social?: StringFieldUpdateOperationsInput | string
    cnpj?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    administradores?: EstacionamentoAndAdministradoresUpdateManyWithoutEstacionamentoNestedInput
  }

  export type EstacionamentoUncheckedUpdateWithoutEnderecoInput = {
    id?: IntFieldUpdateOperationsInput | number
    preco?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    vagas_preferenciais?: IntFieldUpdateOperationsInput | number
    vagas_gerais?: IntFieldUpdateOperationsInput | number
    razao_social?: StringFieldUpdateOperationsInput | string
    cnpj?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    administradores?: EstacionamentoAndAdministradoresUncheckedUpdateManyWithoutEstacionamentoNestedInput
  }

  export type VeiculoCreateManyClienteInput = {
    id?: number
    placa: string
    modelo: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type VeiculoUpdateWithoutClienteInput = {
    placa?: StringFieldUpdateOperationsInput | string
    modelo?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VeiculoUncheckedUpdateWithoutClienteInput = {
    id?: IntFieldUpdateOperationsInput | number
    placa?: StringFieldUpdateOperationsInput | string
    modelo?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VeiculoUncheckedUpdateManyWithoutVeiculoInput = {
    id?: IntFieldUpdateOperationsInput | number
    placa?: StringFieldUpdateOperationsInput | string
    modelo?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EstacionamentoAndAdministradoresCreateManyEstacionamentoInput = {
    id_administrador: number
  }

  export type EnderecoCreateManyEstacionamentoInput = {
    id?: number
    cep: number
    bairro: string
    endereco: string
    numero: number
    cidade: string
    uf: string
  }

  export type EstacionamentoAndAdministradoresUpdateWithoutEstacionamentoInput = {
    administrador?: AdministradorUpdateOneRequiredWithoutEstacionamentosNestedInput
  }

  export type EstacionamentoAndAdministradoresUncheckedUpdateWithoutEstacionamentoInput = {
    id_administrador?: IntFieldUpdateOperationsInput | number
  }

  export type EstacionamentoAndAdministradoresUncheckedUpdateManyWithoutAdministradoresInput = {
    id_administrador?: IntFieldUpdateOperationsInput | number
  }

  export type EnderecoUpdateWithoutEstacionamentoInput = {
    cep?: IntFieldUpdateOperationsInput | number
    bairro?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    numero?: IntFieldUpdateOperationsInput | number
    cidade?: StringFieldUpdateOperationsInput | string
    uf?: StringFieldUpdateOperationsInput | string
  }

  export type EnderecoUncheckedUpdateWithoutEstacionamentoInput = {
    id?: IntFieldUpdateOperationsInput | number
    cep?: IntFieldUpdateOperationsInput | number
    bairro?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    numero?: IntFieldUpdateOperationsInput | number
    cidade?: StringFieldUpdateOperationsInput | string
    uf?: StringFieldUpdateOperationsInput | string
  }

  export type EnderecoUncheckedUpdateManyWithoutEnderecoInput = {
    id?: IntFieldUpdateOperationsInput | number
    cep?: IntFieldUpdateOperationsInput | number
    bairro?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    numero?: IntFieldUpdateOperationsInput | number
    cidade?: StringFieldUpdateOperationsInput | string
    uf?: StringFieldUpdateOperationsInput | string
  }

  export type EstacionamentoAndAdministradoresCreateManyAdministradorInput = {
    id_estacionamento: number
  }

  export type EstacionamentoAndAdministradoresUpdateWithoutAdministradorInput = {
    estacionamento?: EstacionamentoUpdateOneRequiredWithoutAdministradoresNestedInput
  }

  export type EstacionamentoAndAdministradoresUncheckedUpdateWithoutAdministradorInput = {
    id_estacionamento?: IntFieldUpdateOperationsInput | number
  }

  export type EstacionamentoAndAdministradoresUncheckedUpdateManyWithoutEstacionamentosInput = {
    id_estacionamento?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}